{"ast":null,"code":"import _slicedToArray from \"/home/mistermboy/repositories/shex-author/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mistermboy/repositories/shex-author/src/components/shexComponents/types/ValueTypeComp.js\";\nimport React, { useContext, useState } from 'react';\nimport ComponentTypeFactory from './ComponentTypeFactory';\nimport { ShapesContext } from '../../../App';\n\nfunction ValueTypeComp(props) {\n  const shape = props.shape,\n        triple = props.triple;\n  const context = useContext(ShapesContext);\n\n  const _useState = useState(triple.value.getTypeName()),\n        _useState2 = _slicedToArray(_useState, 2),\n        valueType = _useState2[0],\n        setValueType = _useState2[1];\n\n  const handleChange = event => {\n    let newType = event.target.value;\n\n    if (newType != 'shape') {\n      //This is necesary when we change from ShapeType to otherType\n      triple.inlineShape.shape = null;\n    }\n\n    triple.setValue(newType);\n    context.emit();\n    setValueType(newType);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"row col-10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: \"col-5 form-control valueType\",\n    value: valueType,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"primitive\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"Primitive\"), React.createElement(\"option\", {\n    value: \"shape\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Shape\"), React.createElement(\"option\", {\n    value: \"iriRef\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"IriRef\"), React.createElement(\"option\", {\n    value: \"prefixedIri\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Prefixed\"), React.createElement(\"option\", {\n    value: \"literal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Literal\"), React.createElement(\"option\", {\n    value: \"nonliteral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"NonLiteral\"), React.createElement(\"option\", {\n    value: \"iri\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"IRI\"), React.createElement(\"option\", {\n    value: \"bnode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"BNODE\")), React.createElement(ComponentTypeFactory, {\n    shape: shape,\n    triple: triple,\n    type: \"value\",\n    instance: triple.value.getTypeName(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }));\n}\n\nexport default ValueTypeComp;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/components/shexComponents/types/ValueTypeComp.js"],"names":["React","useContext","useState","ComponentTypeFactory","ShapesContext","ValueTypeComp","props","shape","triple","context","value","getTypeName","valueType","setValueType","handleChange","event","newType","target","inlineShape","setValue","emit"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,UAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AAEA,SAAQC,aAAR,QAA4B,cAA5B;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,QAEnBC,KAFmB,GAEHD,KAFG,CAEnBC,KAFmB;AAAA,QAEbC,MAFa,GAEHF,KAFG,CAEbE,MAFa;AAI1B,QAAMC,OAAO,GAAGR,UAAU,CAACG,aAAD,CAA1B;;AAJ0B,oBAKOF,QAAQ,CAACM,MAAM,CAACE,KAAP,CAAaC,WAAb,EAAD,CALf;AAAA;AAAA,QAKnBC,SALmB;AAAA,QAKTC,YALS;;AAO1B,QAAMC,YAAY,GAAIC,KAAD,IAAU;AAC3B,QAAIC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAaP,KAA3B;;AACA,QAAGM,OAAO,IAAE,OAAZ,EAAoB;AAChB;AACAR,MAAAA,MAAM,CAACU,WAAP,CAAmBX,KAAnB,GAA2B,IAA3B;AACH;;AACDC,IAAAA,MAAM,CAACW,QAAP,CAAgBH,OAAhB;AACAP,IAAAA,OAAO,CAACW,IAAR;AACAP,IAAAA,YAAY,CAACG,OAAD,CAAZ;AACH,GATD;;AAWA,SAAS;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACO;AAAQ,IAAA,SAAS,EAAC,8BAAlB;AACgB,IAAA,KAAK,EAAEJ,SADvB;AAEgB,IAAA,QAAQ,EAAEE,YAF1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIgB;AAAQ,IAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAJhB,EAKgB;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aALhB,EAMgB;AAAQ,IAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANhB,EAOgB;AAAQ,IAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPhB,EAQgB;AAAQ,IAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARhB,EASgB;AAAQ,IAAA,KAAK,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAThB,EAUgB;AAAQ,IAAA,KAAK,EAAC,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAVhB,EAWgB;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAXhB,CADP,EAgBmB,oBAAC,oBAAD;AAAsB,IAAA,KAAK,EAAEP,KAA7B;AACI,IAAA,MAAM,EAAEC,MADZ;AAEI,IAAA,IAAI,EAAC,OAFT;AAGI,IAAA,QAAQ,EAAEA,MAAM,CAACE,KAAP,CAAaC,WAAb,EAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBnB,CAAT;AAuBH;;AAED,eAAeN,aAAf","sourcesContent":["import React,{useContext,useState} from 'react';\nimport ComponentTypeFactory from './ComponentTypeFactory';\n\nimport {ShapesContext} from '../../../App';\n\nfunction ValueTypeComp(props) {\n    \n    const {shape,triple} = props;\n\n    const context = useContext(ShapesContext);\n    const [valueType,setValueType] = useState(triple.value.getTypeName())\n    \n    const handleChange = (event) =>{\n        let newType = event.target.value;\n        if(newType!='shape'){\n            //This is necesary when we change from ShapeType to otherType\n            triple.inlineShape.shape = null;\n        }\n        triple.setValue(newType);\n        context.emit();\n        setValueType(newType);\n    }\n\n    return  (<div className=\"row col-10\">\n                    <select className=\"col-5 form-control valueType\"\n                                    value={valueType} \n                                    onChange={handleChange}>\n\n                                    <option value=\"primitive\">Primitive</option>\n                                    <option value=\"shape\">Shape</option>\n                                    <option value=\"iriRef\">IriRef</option>\n                                    <option value=\"prefixedIri\">Prefixed</option>\n                                    <option value=\"literal\">Literal</option>\n                                    <option value=\"nonliteral\">NonLiteral</option>\n                                    <option value=\"iri\">IRI</option>\n                                    <option value=\"bnode\">BNODE</option>\n                                </select>\n\n\n                                <ComponentTypeFactory shape={shape} \n                                    triple={triple}\n                                    type='value'\n                                    instance={triple.value.getTypeName()}/>\n\n                    </div>);\n\n}\n\nexport default ValueTypeComp;\n\n"]},"metadata":{},"sourceType":"module"}