{"ast":null,"code":"import shexUtils from'./shexUtils';import Editor from'../entities/editor';import Shape from'../entities/shexEntities/shape';import Triple from'../entities/shexEntities/triple';import TypesFactory from'../entities/shexEntities/types/typesFactory';import PrefixedIri from'../entities/shexEntities/types/concreteTypes/prefixedIri';import IriRef from'../entities/shexEntities/types/concreteTypes/iriRef';import BNode from'../entities/shexEntities/types/concreteTypes/bNode';import Primitive from'../entities/shexEntities/types/concreteTypes/primitive';import ShapeReference from'../entities/shexEntities/types/concreteTypes/shapeReference';import Literal from'../entities/shexEntities/types/concreteTypes/kinds/literal';import NonLiteral from'../entities/shexEntities/types/concreteTypes/kinds/nonLiteral';import IriKind from'../entities/shexEntities/types/concreteTypes/kinds/iriKind';import BNodeKind from'../entities/shexEntities/types/concreteTypes/kinds/bNodeKind';import BlankKind from'../entities/shexEntities/types/concreteTypes/kinds/blankKind';import Prefix from'../entities/shexEntities/shexUtils/prefix';import InlineShape from'../entities/shexEntities/shexUtils/inlineShape';//HAY QUE METER TODOS\nvar PRIMITIVES=['string','integer','date','boolean'];var CARDINALITY=['*','?','+'];var inlines;function getTokens(){var yashe=Editor.getInstance().getYashe();var tokens=[];if(yashe!=undefined){var numPrefixes=Object.keys(yashe.getDefinedPrefixes()).length;for(var l=numPrefixes+1;l<yashe.lineCount();++l){var lineTokens=getNonWsTokens(yashe.getLineTokens(l));lineTokens.forEach(function(token){tokens.push(token);});}}return tokens;}function getDefinedShapes(tokens){var brackets=0;var shape=[];var defShapes=[];//Separate shapes in arrays\ntokens.forEach(function(element){shape.push(element);if(element.string=='{'){brackets++;}if(element.string=='}'){brackets--;//Is the last } ?\nif(brackets==0){defShapes.push(shape);shape=[];}}});return defShapes;}function getShapes(defShapes){inlines=[];var shapes=[];var yashe=Editor.getInstance().getYashe();defShapes.forEach(function(shape){var id=shapes.length;var shapeDef=shape[0].string;var shapeType=getType(shapeDef,'shapeName');var qualifier=getQualifier(shape);var triples=getTriples(id,shape);shapes.push(new Shape(id,shapeType,triples,qualifier));});return shapes;}function getQualifier(shape){if(shape[1].type=='keyword'){var type=shape[1].string.toLowerCase();return new TypesFactory().createType(type);}return new BlankKind();}function getTriples(shapeId,shape){var triples=[];var singleTriple=[];var yashe=Editor.getInstance().getYashe();var start=getStart(shape);for(var i=start;i<shape.length;i++){singleTriple.push(shape[i]);if(shape[i].type=='punc'){// finish of the triple ';'\nif(singleTriple.length!=1){//This line is neccesary when last triple of the shape ends with ';'\ntriples.push(getTriple(triples,singleTriple,shapeId));singleTriple=[];}}}return triples;}function getTriple(triples,singleTriple,shapeId){var id=triples.length;var type;var value;var cardinality;var inlineShape=new InlineShape();var inlineName;var index=0;for(var s in singleTriple){var token=singleTriple[s];if(index==0){type=getType(token.string,'tripleName');}else{if(token.type=='string-2'||token.type=='keyword'||token.type=='variable-3'){value=getValue(token.string);}if(token.type=='at'){inlineName=getInlineName(token.string);inlines.push({shapeId:shapeId,tripleId:id,inlineName:inlineName});}if(token.type=='card'){cardinality=token.string;}}index++;}//ShapeRef\nif(inlineName!=undefined){var ref;if(value!=undefined){ref=value.getTypeName();}value=new ShapeReference(ref);}return new Triple(id,type,value,inlineShape,cardinality);}function getStart(shape){for(var i=0;i<shape.length;i++){if(shape[i].string=='{'){return i+1;}}}function getValue(def){var factory=new TypesFactory();var type=factory.createType(def.toLowerCase());if(type!=undefined){return type;}if(def.startsWith('<')){var value=def.split('<')[1].split('>')[0];return new IriRef('valueName',value);}var token=def.split(':');var yashe=Editor.getInstance().getYashe();if(token.length==2){//At this point it can be Prefixed,Primitive or ShapeRef\nif(isPrimitive(token[1])){return new Primitive(token[1]);}else{var prefixName=token[0];var prefixValue=getPrefixValue(yashe.getDefinedPrefixes(),prefixName);var prefix=new Prefix(prefixName,prefixValue);return new PrefixedIri('valueName',prefix,token[1]);}}}function getType(def,context){var value;var yashe=Editor.getInstance().getYashe();if(def.startsWith('<')){value=def.split('<')[1].split('>')[0];return new IriRef(context,value);}else if(def.startsWith('_:')){value=def.split(':')[1];return new BNode(context,value);}else{value=def.split(':')[1];var prefixName=def.split(':')[0];var prefixValue=getPrefixValue(yashe.getDefinedPrefixes(),prefixName);var prefix=new Prefix(prefixName,prefixValue);return new PrefixedIri(context,prefix,value);}}function updateInlines(shapes){for(var inShape in inlines){var shapeId=inlines[inShape].shapeId;var tripleId=inlines[inShape].tripleId;var name=inlines[inShape].inlineName;var shape=shexUtils.getShapeById(shapes,shapeId);var triple=shexUtils.getTripleById(shape,tripleId);var shapeRef=shexUtils.getShapeByName(shapes,name);triple.getInlineShape().setShape(shapeRef);}}function getPrefixValue(defPrefixes,prefixName){var prefixValue;for(var pre in defPrefixes){if(pre==prefixName){prefixValue=defPrefixes[pre];}}return prefixValue;}function isPrimitive(value){for(var prim in PRIMITIVES){if(PRIMITIVES[prim]==value){return true;}}return false;}function getInlineName(token){if(token.startsWith('@<')){return token.split('<')[1].split('>')[0];}return token.split(':')[1];}function getNonWsTokens(tokens){return tokens.filter(function(obj){return obj.type!='ws';});}var tokenUtils={getTokens:getTokens,getDefinedShapes:getDefinedShapes,getShapes:getShapes,updateInlines:updateInlines};export default tokenUtils;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/utils/tokenUtils.js"],"names":["shexUtils","Editor","Shape","Triple","TypesFactory","PrefixedIri","IriRef","BNode","Primitive","ShapeReference","Literal","NonLiteral","IriKind","BNodeKind","BlankKind","Prefix","InlineShape","PRIMITIVES","CARDINALITY","inlines","getTokens","yashe","getInstance","getYashe","tokens","undefined","numPrefixes","Object","keys","getDefinedPrefixes","length","l","lineCount","lineTokens","getNonWsTokens","getLineTokens","forEach","token","push","getDefinedShapes","brackets","shape","defShapes","element","string","getShapes","shapes","id","shapeDef","shapeType","getType","qualifier","getQualifier","triples","getTriples","type","toLowerCase","createType","shapeId","singleTriple","start","getStart","i","getTriple","value","cardinality","inlineShape","inlineName","index","s","getValue","getInlineName","tripleId","ref","getTypeName","def","factory","startsWith","split","isPrimitive","prefixName","prefixValue","getPrefixValue","prefix","context","updateInlines","inShape","name","getShapeById","triple","getTripleById","shapeRef","getShapeByName","getInlineShape","setShape","defPrefixes","pre","prim","filter","obj","tokenUtils"],"mappings":"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","sourcesContent":["import shexUtils from './shexUtils';\n\nimport Editor from '../entities/editor';\n\nimport  Shape from '../entities/shexEntities/shape';\nimport  Triple from '../entities/shexEntities/triple';\n\nimport TypesFactory from '../entities/shexEntities/types/typesFactory';\n\nimport PrefixedIri from '../entities/shexEntities/types/concreteTypes/prefixedIri';\nimport IriRef from '../entities/shexEntities/types/concreteTypes/iriRef';\nimport BNode from '../entities/shexEntities/types/concreteTypes/bNode';\nimport Primitive from '../entities/shexEntities/types/concreteTypes/primitive';\nimport ShapeReference from '../entities/shexEntities/types/concreteTypes/shapeReference';\n\nimport Literal from '../entities/shexEntities/types/concreteTypes/kinds/literal';\nimport NonLiteral from '../entities/shexEntities/types/concreteTypes/kinds/nonLiteral';\nimport IriKind from '../entities/shexEntities/types/concreteTypes/kinds/iriKind';\nimport BNodeKind from '../entities/shexEntities/types/concreteTypes/kinds/bNodeKind';\nimport BlankKind from '../entities/shexEntities/types/concreteTypes/kinds/blankKind';\n\n\n\nimport Prefix from '../entities/shexEntities/shexUtils/prefix';\n\nimport InlineShape from '../entities/shexEntities/shexUtils/inlineShape';\n\n\n//HAY QUE METER TODOS\nconst PRIMITIVES = ['string','integer','date','boolean'];\nconst CARDINALITY = ['*','?','+'];\n\n\nlet inlines;\n\nfunction getTokens(){\n    let yashe = Editor.getInstance().getYashe();\n    let tokens =[];\n    if(yashe!=undefined){\n        let numPrefixes = Object.keys(yashe.getDefinedPrefixes()).length;\n        for (var l = numPrefixes+1; l < yashe.lineCount(); ++l) {\n            let lineTokens = getNonWsTokens(yashe.getLineTokens(l));\n            lineTokens.forEach(token =>{\n                tokens.push(token);\n            })\n\n        }\n    }\n    return tokens;\n}\n\nfunction getDefinedShapes(tokens){\n    let brackets=0\n    let shape=[];\n    let defShapes = [];\n    //Separate shapes in arrays\n    tokens.forEach(element =>{\n        shape.push(element);\n        if(element.string == '{'){\n            brackets++;\n        }\n\n        if(element.string == '}'){\n            brackets--;\n            //Is the last } ?\n            if(brackets==0){\n                defShapes.push(shape);\n                shape = [];\n            }\n        }\n\n    })\n    return defShapes;\n}\n\n\nfunction getShapes(defShapes){\n    inlines = [];\n    let shapes = [];\n    let yashe = Editor.getInstance().getYashe();\n\n    defShapes.forEach(shape => {\n        let id = shapes.length;\n        let shapeDef = shape[0].string;\n        let shapeType = getType(shapeDef,'shapeName');\n        let qualifier = getQualifier(shape);\n        let triples = getTriples(id,shape);\n\n        shapes.push(new Shape(id,shapeType,triples,qualifier));\n    })\n    return shapes;\n\n}\n\nfunction getQualifier(shape) {\n    if(shape[1].type == 'keyword'){\n        let type = shape[1].string.toLowerCase();\n        return new TypesFactory().createType(type);\n    }\n    return new BlankKind();\n}\n\nfunction getTriples(shapeId,shape) {\n        let triples = [];\n        let singleTriple = [];\n        let yashe = Editor.getInstance().getYashe();\n        let start = getStart(shape);\n        for(let i=start;i<shape.length;i++){\n            singleTriple.push(shape[i])\n            if(shape[i].type == 'punc'){// finish of the triple ';'\n                if(singleTriple.length!=1){ //This line is neccesary when last triple of the shape ends with ';'\n           \n                    triples.push(getTriple(triples,singleTriple,shapeId));\n                    singleTriple = [];\n                }\n            }\n\n        }\n    return triples;\n}\n\nfunction getTriple(triples,singleTriple,shapeId) {\n    let id = triples.length;\n    let type;\n    let value;\n    let cardinality;\n    let inlineShape = new InlineShape();\n    let inlineName;\n    let index = 0;\n    for(let s in singleTriple){\n        let token = singleTriple[s];\n        \n        if(index == 0){\n            type = getType(token.string,'tripleName');\n            \n        }else{\n   \n            if(token.type == 'string-2' || token.type == 'keyword' || token.type == 'variable-3'){\n                value = getValue(token.string);\n            }\n    \n            if(token.type == 'at' ){\n                \n                inlineName = getInlineName(token.string);\n                inlines.push(\n                        {\n                            shapeId:shapeId,\n                            tripleId:id,\n                            inlineName:inlineName\n                        }\n                    );\n            }\n\n            if(token.type == 'card' ){\n                cardinality = token.string;\n            }\n\n        }\n        index++;\n    }\n\n\n    //ShapeRef\n    if(inlineName != undefined){\n        let ref;\n        if(value!= undefined){\n           ref = value.getTypeName();\n        }\n        value = new ShapeReference(ref); \n    }\n\n    return new Triple(id,type,value,inlineShape,cardinality);\n}\n\nfunction getStart(shape){\n    for(let i=0;i<shape.length;i++){\n        if(shape[i].string=='{'){\n            return i+1;\n        }\n    }\n}\n\n\n\nfunction getValue(def) {\n\n    let factory = new TypesFactory();\n    let type = factory.createType(def.toLowerCase());\n\n    if(type!=undefined){\n        return type;\n    }\n\n\n    if(def.startsWith('<')){\n        let value = def.split('<')[1].split('>')[0];\n        return new IriRef('valueName',value);\n    }\n\n    let token = def.split(':');\n    let yashe = Editor.getInstance().getYashe();\n\n    if(token.length==2){\n        //At this point it can be Prefixed,Primitive or ShapeRef\n        if(isPrimitive(token[1])){\n            return new Primitive(token[1]);\n        }else{\n            let prefixName = token[0];\n            let prefixValue = getPrefixValue(yashe.getDefinedPrefixes(),prefixName)\n            let prefix = new Prefix(prefixName,prefixValue);\n            return  new PrefixedIri('valueName',prefix,token[1]);\n        }\n\n    }\n \n}\n\nfunction getType(def,context) {\n    let value;\n    let yashe = Editor.getInstance().getYashe();\n    if(def.startsWith('<')){\n        value = def.split('<')[1].split('>')[0];\n        return new IriRef(context,value);\n    }else if(def.startsWith('_:')){\n        value = def.split(':')[1];\n        return new BNode(context,value);\n    }else{\n        value = def.split(':')[1];\n        let prefixName = def.split(':')[0];\n        let prefixValue = getPrefixValue(yashe.getDefinedPrefixes(),prefixName)\n        let prefix = new Prefix(prefixName,prefixValue);\n        return new PrefixedIri(context,prefix,value);\n    }\n}\n\n\nfunction updateInlines(shapes) {\n\n    for(let inShape in inlines){\n  \n        let shapeId = inlines[inShape].shapeId;\n        let tripleId = inlines[inShape].tripleId;\n        let name = inlines[inShape].inlineName;\n\n        let shape = shexUtils.getShapeById(shapes,shapeId);\n        let triple = shexUtils.getTripleById(shape,tripleId);\n\n        let shapeRef = shexUtils.getShapeByName(shapes,name);\n        triple.getInlineShape().setShape(shapeRef);\n\n    }\n}\n\n\n\nfunction getPrefixValue(defPrefixes,prefixName){\n    let prefixValue;\n    for(let pre in defPrefixes){\n        if(pre==prefixName){\n            prefixValue = defPrefixes[pre]\n        }\n    }\n    return prefixValue;\n}\n\n\nfunction isPrimitive(value) {\n    for(let prim in PRIMITIVES){\n        if(PRIMITIVES[prim] == value){\n            return true;\n        }\n    }\n    return false;\n}\n\n\nfunction getInlineName(token) {\n    if(token.startsWith('@<')){\n        return token.split('<')[1].split('>')[0];\n    }\n    return token.split(':')[1];\n}\n\n\nfunction getNonWsTokens(tokens){\n    return tokens.filter(function(obj){\n        return obj.type != 'ws';\n    })\n}\n\nconst tokenUtils = {\n    getTokens:getTokens,\n    getDefinedShapes:getDefinedShapes,\n    getShapes:getShapes,\n    updateInlines:updateInlines\n}\n\nexport default tokenUtils;"]},"metadata":{},"sourceType":"module"}