{"ast":null,"code":"import _slicedToArray from \"/home/mistermboy/repositories/shex-author/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mistermboy/repositories/shex-author/src/components/shexComponents/types/concrete/ShapeRefComp.js\";\nimport React, { useState, useContext } from 'react';\nimport { ShapesContext } from '../../../../App';\nimport Qualifier from '../../utils/Qualifier';\nimport shexUtils from '../../../../utils/shexUtils';\n\nfunction ShapeRefComp(props) {\n  const context = useContext(ShapesContext);\n  const shape = props.shape,\n        triple = props.triple;\n  let inlineValue = '';\n\n  if (triple.inlineShape.shape != null) {\n    inlineValue = triple.inlineShape.shape.id;\n  }\n\n  const _useState = useState(inlineValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        inlineShape = _useState2[0],\n        setInlineShape = _useState2[1];\n\n  const _useState3 = useState(triple.value.getTypeName()),\n        _useState4 = _slicedToArray(_useState3, 2),\n        valueType = _useState4[0],\n        setValueType = _useState4[1];\n\n  const handleInlineChange = e => {\n    const shapeId = e.target.value;\n    let inlineShape = null;\n    let inlineSelector = '';\n\n    if (shapeId != '') {\n      inlineShape = shexUtils.getShapeById(context.shapes, shapeId);\n      inlineSelector = inlineShape.id;\n    }\n\n    triple.getInlineShape().setShape(inlineShape);\n    context.emit();\n    setInlineShape(inlineSelector);\n  };\n\n  const handleTypeChange = e => {\n    let newType = e.target.value;\n    triple.setValue(newType);\n    context.emit();\n    setValueType(newType);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"row col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: \"col form-control valueInlineShape\",\n    value: inlineShape,\n    onChange: handleInlineChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), context.shapes.map(shape => {\n    return React.createElement(\"option\", {\n      key: shape.id,\n      value: shape.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, '@' + shape.type);\n  })), React.createElement(Qualifier, {\n    triple: triple,\n    scope: \"triple\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n}\n\nexport default ShapeRefComp;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/components/shexComponents/types/concrete/ShapeRefComp.js"],"names":["React","useState","useContext","ShapesContext","Qualifier","shexUtils","ShapeRefComp","props","context","shape","triple","inlineValue","inlineShape","id","setInlineShape","value","getTypeName","valueType","setValueType","handleInlineChange","e","shapeId","target","inlineSelector","getShapeById","shapes","getInlineShape","setShape","emit","handleTypeChange","newType","setValue","map","type"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,UAAvB,QAAwC,OAAxC;AACA,SAAQC,aAAR,QAA4B,iBAA5B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA,OAAOC,SAAP,MAAsB,6BAAtB;;AAEA,SAASC,YAAT,CAAuBC,KAAvB,EAA8B;AAE1B,QAAMC,OAAO,GAAGN,UAAU,CAACC,aAAD,CAA1B;AAF0B,QAGnBM,KAHmB,GAGHF,KAHG,CAGnBE,KAHmB;AAAA,QAGbC,MAHa,GAGHH,KAHG,CAGbG,MAHa;AAK1B,MAAIC,WAAW,GAAG,EAAlB;;AACA,MAAGD,MAAM,CAACE,WAAP,CAAmBH,KAAnB,IAA4B,IAA/B,EAAoC;AAChCE,IAAAA,WAAW,GAAGD,MAAM,CAACE,WAAP,CAAmBH,KAAnB,CAAyBI,EAAvC;AACH;;AARyB,oBAUWZ,QAAQ,CAACU,WAAD,CAVnB;AAAA;AAAA,QAUnBC,WAVmB;AAAA,QAUPE,cAVO;;AAAA,qBAWOb,QAAQ,CAACS,MAAM,CAACK,KAAP,CAAaC,WAAb,EAAD,CAXf;AAAA;AAAA,QAWnBC,SAXmB;AAAA,QAWTC,YAXS;;AAc1B,QAAMC,kBAAkB,GAAIC,CAAD,IAAM;AAC7B,UAAMC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASP,KAAzB;AACA,QAAIH,WAAW,GAAG,IAAlB;AACA,QAAIW,cAAc,GAAG,EAArB;;AACA,QAAGF,OAAO,IAAE,EAAZ,EAAe;AACXT,MAAAA,WAAW,GAAGP,SAAS,CAACmB,YAAV,CAAuBhB,OAAO,CAACiB,MAA/B,EAAsCJ,OAAtC,CAAd;AACAE,MAAAA,cAAc,GAAGX,WAAW,CAACC,EAA7B;AACH;;AACDH,IAAAA,MAAM,CAACgB,cAAP,GAAwBC,QAAxB,CAAiCf,WAAjC;AACAJ,IAAAA,OAAO,CAACoB,IAAR;AACAd,IAAAA,cAAc,CAACS,cAAD,CAAd;AACH,GAXD;;AAaA,QAAMM,gBAAgB,GAAIT,CAAD,IAAM;AAC3B,QAAIU,OAAO,GAAGV,CAAC,CAACE,MAAF,CAASP,KAAvB;AACAL,IAAAA,MAAM,CAACqB,QAAP,CAAgBD,OAAhB;AACAtB,IAAAA,OAAO,CAACoB,IAAR;AACAV,IAAAA,YAAY,CAACY,OAAD,CAAZ;AACH,GALD;;AAQA,SAAQ;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,SAAS,EAAC,mCAAlB;AACQ,IAAA,KAAK,EAAElB,WADf;AAEQ,IAAA,QAAQ,EAAEO,kBAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAKIX,OAAO,CAACiB,MAAR,CAAeO,GAAf,CAAmBvB,KAAK,IAAG;AACzB,WAAO;AAAQ,MAAA,GAAG,EAAEA,KAAK,CAACI,EAAnB;AAAuB,MAAA,KAAK,EAAEJ,KAAK,CAACI,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAyC,MAAIJ,KAAK,CAACwB,IAAnD,CAAP;AACD,GAFD,CALJ,CADJ,EAYI,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAEvB,MAAnB;AAA2B,IAAA,KAAK,EAAC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZJ,CAAR;AAoBH;;AAED,eAAeJ,YAAf","sourcesContent":["import React,{useState,useContext} from 'react';\nimport {ShapesContext} from '../../../../App';\nimport Qualifier from '../../utils/Qualifier';\n\nimport shexUtils from '../../../../utils/shexUtils';\n\nfunction ShapeRefComp (props) {\n\n    const context = useContext(ShapesContext);\n    const {shape,triple} = props;\n\n    let inlineValue = '';\n    if(triple.inlineShape.shape != null){\n        inlineValue = triple.inlineShape.shape.id;\n    }\n    \n    const [inlineShape,setInlineShape] = useState(inlineValue);\n    const [valueType,setValueType] = useState(triple.value.getTypeName())\n\n\n    const handleInlineChange = (e) =>{\n        const shapeId = e.target.value;\n        let inlineShape = null;\n        let inlineSelector = '';\n        if(shapeId!=''){\n            inlineShape = shexUtils.getShapeById(context.shapes,shapeId);\n            inlineSelector = inlineShape.id;\n        }\n        triple.getInlineShape().setShape(inlineShape);\n        context.emit();\n        setInlineShape(inlineSelector);\n    }\n\n    const handleTypeChange = (e) =>{\n        let newType = e.target.value;\n        triple.setValue(newType);\n        context.emit();\n        setValueType(newType);\n    }\n\n\n    return (<div className='row col'>\n                <select className=\"col form-control valueInlineShape\"\n                        value={inlineShape}\n                        onChange={handleInlineChange}>\n                    <option value=''></option>\n                    { \n                    context.shapes.map(shape =>{\n                      return <option key={shape.id} value={shape.id}>{'@'+shape.type}</option>\n                    })\n                  }\n                </select>\n\n                <Qualifier triple={triple} scope='triple'/>\n            </div>\n\n    \n    \n    \n    );\n    \n}\n\nexport default ShapeRefComp;\n\n"]},"metadata":{},"sourceType":"module"}