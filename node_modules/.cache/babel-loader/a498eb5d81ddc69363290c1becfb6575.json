{"ast":null,"code":"import _classCallCheck from\"/home/mistermboy/repositories/shex-author/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mistermboy/repositories/shex-author/node_modules/@babel/runtime/helpers/esm/createClass\";import TypesFactory from'./types/typesFactory';import IrirRef from'./types/concreteTypes/iriRef';import PrefixedIri from'./types/concreteTypes/prefixedIri';import BlankKind from'./types/concreteTypes/kinds/blankKind';var Shape=/*#__PURE__*/function(){function Shape(id){var type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:new IrirRef('shapeName');var triples=arguments.length>2&&arguments[2]!==undefined?arguments[2]:[];var qualifier=arguments.length>3&&arguments[3]!==undefined?arguments[3]:new BlankKind();_classCallCheck(this,Shape);this.id=id;this.type=type;this.triples=triples;this.triplesCount=this.triples.length;this.factory=new TypesFactory();this.qualifier=qualifier;}_createClass(Shape,[{key:\"addTriple\",value:function addTriple(triple){this.triples.push(triple);this.triplesCount++;}},{key:\"removeTriple\",value:function removeTriple(tripleId){this.triples=this.triples.filter(function(obj){return obj.id!=tripleId;});}},{key:\"getTriplesCount\",value:function getTriplesCount(){return this.triplesCount;}},{key:\"getId\",value:function getId(){return this.id;}},{key:\"getType\",value:function getType(){return this.type;}},{key:\"getTriples\",value:function getTriples(){return this.triples;}},{key:\"setTriples\",value:function setTriples(triples){this.triples=triples;}},{key:\"getQualifier\",value:function getQualifier(){return this.qualifier;}},{key:\"setQualifier\",value:function setQualifier(qualifier){this.qualifier=this.factory.createType(qualifier,'shapeName');}},{key:\"setType\",value:function setType(type){this.type=this.factory.createType(type,'shapeName');}},{key:\"toString\",value:function toString(){var str=this.type+' '+this.qualifier+' {\\n';this.triples.forEach(function(triple){str+=triple;});str+=\"}\\n\\n\";return str;}}]);return Shape;}();export default Shape;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/entities/shexEntities/shape.js"],"names":["TypesFactory","IrirRef","PrefixedIri","BlankKind","Shape","id","type","triples","qualifier","triplesCount","length","factory","triple","push","tripleId","filter","obj","createType","str","forEach"],"mappings":"sPAAA,MAAOA,CAAAA,YAAP,KAAyB,sBAAzB,CAEA,MAAOC,CAAAA,OAAP,KAAoB,8BAApB,CACA,MAAOC,CAAAA,WAAP,KAAwB,mCAAxB,CACA,MAAOC,CAAAA,SAAP,KAAsB,uCAAtB,C,GAEMC,CAAAA,K,yBAEJ,eAAYC,EAAZ,CAAqF,IAAtEC,CAAAA,IAAsE,2DAAjE,GAAIL,CAAAA,OAAJ,CAAY,WAAZ,CAAiE,IAAxCM,CAAAA,OAAwC,2DAA9B,EAA8B,IAA3BC,CAAAA,SAA2B,2DAAjB,GAAIL,CAAAA,SAAJ,EAAiB,6BACjF,KAAKE,EAAL,CAAUA,EAAV,CACA,KAAKC,IAAL,CAAYA,IAAZ,CACA,KAAKC,OAAL,CAAeA,OAAf,CACA,KAAKE,YAAL,CAAoB,KAAKF,OAAL,CAAaG,MAAjC,CACA,KAAKC,OAAL,CAAe,GAAIX,CAAAA,YAAJ,EAAf,CACA,KAAKQ,SAAL,CAAiBA,SAAjB,CACD,C,8DAESI,M,CAAO,CACb,KAAKL,OAAL,CAAaM,IAAb,CAAkBD,MAAlB,EACA,KAAKH,YAAL,GACH,C,kDAEYK,Q,CAAS,CACpB,KAAKP,OAAL,CAAe,KAAKA,OAAL,CAAaQ,MAAb,CAAoB,SAAUC,GAAV,CAAgB,CACjD,MAAOA,CAAAA,GAAG,CAACX,EAAJ,EAAUS,QAAjB,CACD,CAFc,CAAf,CAGD,C,yDAEgB,CACf,MAAO,MAAKL,YAAZ,CACD,C,qCAGM,CACL,MAAO,MAAKJ,EAAZ,CACD,C,yCAEQ,CACP,MAAO,MAAKC,IAAZ,CACD,C,+CAGY,CACT,MAAO,MAAKC,OAAZ,CACF,C,8CAESA,O,CAAQ,CACjB,KAAKA,OAAL,CAAeA,OAAf,CACD,C,mDAEc,CACX,MAAO,MAAKC,SAAZ,CACF,C,kDAEWA,S,CAAU,CACrB,KAAKA,SAAL,CAAiB,KAAKG,OAAL,CAAaM,UAAb,CAAwBT,SAAxB,CAAkC,WAAlC,CAAjB,CACD,C,wCAGOF,I,CAAK,CACT,KAAKA,IAAL,CAAY,KAAKK,OAAL,CAAaM,UAAb,CAAwBX,IAAxB,CAA6B,WAA7B,CAAZ,CACF,C,2CAGS,CAET,GAAIY,CAAAA,GAAG,CAAG,KAAKZ,IAAL,CAAU,GAAV,CAAc,KAAKE,SAAnB,CAA6B,MAAvC,CACA,KAAKD,OAAL,CAAaY,OAAb,CAAqB,SAAAP,MAAM,CAAI,CAC7BM,GAAG,EAAEN,MAAL,CACD,CAFD,EAIAM,GAAG,EAAE,OAAL,CACA,MAAOA,CAAAA,GAAP,CAEA,C,qBAKN,cAAed,CAAAA,KAAf","sourcesContent":["import TypesFactory from './types/typesFactory';\n\nimport IrirRef from './types/concreteTypes/iriRef';\nimport PrefixedIri from './types/concreteTypes/prefixedIri';\nimport BlankKind from './types/concreteTypes/kinds/blankKind';\n\nclass Shape {\n\n  constructor(id,type=new IrirRef('shapeName'),triples = [],qualifier=new BlankKind()) {\n      this.id = id;\n      this.type = type;\n      this.triples = triples;\n      this.triplesCount = this.triples.length;\n      this.factory = new TypesFactory();\n      this.qualifier = qualifier;\n    }\n\n    addTriple(triple){\n        this.triples.push(triple);\n        this.triplesCount++;\n    }\n\n    removeTriple(tripleId){\n      this.triples = this.triples.filter(function( obj ) {\n        return obj.id != tripleId\n      });\n    }\n\n    getTriplesCount(){\n      return this.triplesCount;\n    }\n\n\n    getId(){\n      return this.id;\n    }\n\n    getType(){\n      return this.type; \n    }\n\n\n    getTriples() {\n        return this.triples;\n     }\n\n    setTriples(triples){\n      this.triples = triples;\n    }\n\n    getQualifier() {\n        return this.qualifier;\n     }\n\n    setQualifier(qualifier){\n      this.qualifier = this.factory.createType(qualifier,'shapeName');\n    }\n    \n\n    setType(type){\n        this.type = this.factory.createType(type,'shapeName');\n     }\n\n\n     toString(){\n    \n      let str = this.type+' '+this.qualifier+' {\\n'\n      this.triples.forEach(triple => {\n        str+=triple;\n      });\n\n      str+=\"}\\n\\n\"\n      return str\n\n     }\n\n\n  }\n\nexport default Shape;"]},"metadata":{},"sourceType":"module"}