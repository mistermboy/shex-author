{"ast":null,"code":"import _slicedToArray from\"/home/mistermboy/repositories/shex-author/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useState}from'react';import FactoryTypeComp from'./FactoryTypeComp';import{ShapesContext}from'../../../App';function ValueTypeComp(props){var shape=props.shape,triple=props.triple;var context=useContext(ShapesContext);var _useState=useState(triple.value.getTypeName()),_useState2=_slicedToArray(_useState,2),valueType=_useState2[0],setValueType=_useState2[1];var handleChange=function handleChange(event){var newType=event.target.value;if(newType!='shape'){//This is necesary when we change from ShapeType to otherType\ntriple.inlineShape.shape=null;}triple.setValue(newType);context.emit();setValueType(newType);};return React.createElement(\"div\",{className:\"row col-10\"},React.createElement(\"select\",{className:\"col-5 form-control valueType\",value:valueType,onChange:handleChange},React.createElement(\"option\",{value:\"primitive\"},\"Primitive\"),React.createElement(\"option\",{value:\"shape\"},\"Shape\"),React.createElement(\"option\",{value:\"iriRef\"},\"IriRef\"),React.createElement(\"option\",{value:\"prefixedIri\"},\"Prefixed\"),React.createElement(\"option\",{value:\"literal\"},\"Literal\"),React.createElement(\"option\",{value:\"nonliteral\"},\"NonLiteral\"),React.createElement(\"option\",{value:\"iri\"},\"IRI\"),React.createElement(\"option\",{value:\"bnode\"},\"BNODE\")),React.createElement(FactoryTypeComp,{shape:shape,triple:triple,type:\"value\",instance:triple.value.getTypeName()}));}export default ValueTypeComp;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/components/shexComponents/types/ValueTypeComp.js"],"names":["React","useContext","useState","FactoryTypeComp","ShapesContext","ValueTypeComp","props","shape","triple","context","value","getTypeName","valueType","setValueType","handleChange","event","newType","target","inlineShape","setValue","emit"],"mappings":"4HAAA,MAAOA,CAAAA,KAAP,EAAcC,UAAd,CAAyBC,QAAzB,KAAwC,OAAxC,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CAEA,OAAQC,aAAR,KAA4B,cAA5B,CAEA,QAASC,CAAAA,aAAT,CAAuBC,KAAvB,CAA8B,IAEnBC,CAAAA,KAFmB,CAEHD,KAFG,CAEnBC,KAFmB,CAEbC,MAFa,CAEHF,KAFG,CAEbE,MAFa,CAI1B,GAAMC,CAAAA,OAAO,CAAGR,UAAU,CAACG,aAAD,CAA1B,CAJ0B,cAKOF,QAAQ,CAACM,MAAM,CAACE,KAAP,CAAaC,WAAb,EAAD,CALf,wCAKnBC,SALmB,eAKTC,YALS,eAO1B,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAU,CAC3B,GAAIC,CAAAA,OAAO,CAAGD,KAAK,CAACE,MAAN,CAAaP,KAA3B,CACA,GAAGM,OAAO,EAAE,OAAZ,CAAoB,CAChB;AACAR,MAAM,CAACU,WAAP,CAAmBX,KAAnB,CAA2B,IAA3B,CACH,CACDC,MAAM,CAACW,QAAP,CAAgBH,OAAhB,EACAP,OAAO,CAACW,IAAR,GACAP,YAAY,CAACG,OAAD,CAAZ,CACH,CATD,CAWA,MAAS,4BAAK,SAAS,CAAC,YAAf,EACO,8BAAQ,SAAS,CAAC,8BAAlB,CACgB,KAAK,CAAEJ,SADvB,CAEgB,QAAQ,CAAEE,YAF1B,EAIgB,8BAAQ,KAAK,CAAC,WAAd,cAJhB,CAKgB,8BAAQ,KAAK,CAAC,OAAd,UALhB,CAMgB,8BAAQ,KAAK,CAAC,QAAd,WANhB,CAOgB,8BAAQ,KAAK,CAAC,aAAd,aAPhB,CAQgB,8BAAQ,KAAK,CAAC,SAAd,YARhB,CASgB,8BAAQ,KAAK,CAAC,YAAd,eAThB,CAUgB,8BAAQ,KAAK,CAAC,KAAd,QAVhB,CAWgB,8BAAQ,KAAK,CAAC,OAAd,UAXhB,CADP,CAgBmB,oBAAC,eAAD,EAAiB,KAAK,CAAEP,KAAxB,CACI,MAAM,CAAEC,MADZ,CAEI,IAAI,CAAC,OAFT,CAGI,QAAQ,CAAEA,MAAM,CAACE,KAAP,CAAaC,WAAb,EAHd,EAhBnB,CAAT,CAuBH,CAED,cAAeN,CAAAA,aAAf","sourcesContent":["import React,{useContext,useState} from 'react';\nimport FactoryTypeComp from './FactoryTypeComp';\n\nimport {ShapesContext} from '../../../App';\n\nfunction ValueTypeComp(props) {\n    \n    const {shape,triple} = props;\n\n    const context = useContext(ShapesContext);\n    const [valueType,setValueType] = useState(triple.value.getTypeName())\n    \n    const handleChange = (event) =>{\n        let newType = event.target.value;\n        if(newType!='shape'){\n            //This is necesary when we change from ShapeType to otherType\n            triple.inlineShape.shape = null;\n        }\n        triple.setValue(newType);\n        context.emit();\n        setValueType(newType);\n    }\n\n    return  (<div className=\"row col-10\">\n                    <select className=\"col-5 form-control valueType\"\n                                    value={valueType} \n                                    onChange={handleChange}>\n\n                                    <option value=\"primitive\">Primitive</option>\n                                    <option value=\"shape\">Shape</option>\n                                    <option value=\"iriRef\">IriRef</option>\n                                    <option value=\"prefixedIri\">Prefixed</option>\n                                    <option value=\"literal\">Literal</option>\n                                    <option value=\"nonliteral\">NonLiteral</option>\n                                    <option value=\"iri\">IRI</option>\n                                    <option value=\"bnode\">BNODE</option>\n                                </select>\n\n\n                                <FactoryTypeComp shape={shape} \n                                    triple={triple}\n                                    type='value'\n                                    instance={triple.value.getTypeName()}/>\n\n                    </div>);\n\n}\n\nexport default ValueTypeComp;\n\n"]},"metadata":{},"sourceType":"module"}