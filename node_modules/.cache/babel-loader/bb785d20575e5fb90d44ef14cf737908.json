{"ast":null,"code":"var _jsxFileName = \"/home/mistermboy/repositories/shex-author/src/components/shexComponents/types/ComponentTypeFactory.js\";\nimport React from 'react';\nimport IriComp from './concrete/IriComp';\nimport PrefixedComp from './concrete/PrefixedComp';\nimport BNodeComp from './concrete/BNodeComp';\nimport PrimitiveComp from './concrete/PrimitiveComp';\nimport ShapeRefComp from './concrete/ShapeRefComp';\n\nfunction ComponentTypeFactory(props) {\n  const shape = props.shape,\n        triple = props.triple,\n        type = props.type,\n        instance = props.instance;\n\n  if (instance == 'iriRef') {\n    return React.createElement(IriComp, {\n      shape: shape,\n      triple: triple,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    });\n  } else if (instance == 'prefixedIri') {\n    return React.createElement(PrefixedComp, {\n      shape: shape,\n      triple: triple,\n      type: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    });\n  } else if (instance == 'bnodeType') {\n    return React.createElement(BNodeComp, {\n      shape: shape,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    });\n  } else if (instance == 'primitive') {\n    return React.createElement(PrimitiveComp, {\n      shape: shape,\n      triple: triple,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    });\n  } else if (instance == 'shape') {\n    return React.createElement(ShapeRefComp, {\n      shape: shape,\n      triple: triple,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n  } else {\n    return null;\n  }\n}\n\nexport default ComponentTypeFactory;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/components/shexComponents/types/ComponentTypeFactory.js"],"names":["React","IriComp","PrefixedComp","BNodeComp","PrimitiveComp","ShapeRefComp","ComponentTypeFactory","props","shape","triple","type","instance"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,aAAP,MAA0B,0BAA1B;AACA,OAAOC,YAAP,MAAyB,yBAAzB;;AAEA,SAASC,oBAAT,CAA+BC,KAA/B,EAAsC;AAAA,QAE3BC,KAF2B,GAEGD,KAFH,CAE3BC,KAF2B;AAAA,QAErBC,MAFqB,GAEGF,KAFH,CAErBE,MAFqB;AAAA,QAEdC,IAFc,GAEGH,KAFH,CAEdG,IAFc;AAAA,QAETC,QAFS,GAEGJ,KAFH,CAETI,QAFS;;AAIlC,MAAGA,QAAQ,IAAI,QAAf,EAAwB;AAEpB,WAAO,oBAAC,OAAD;AAAS,MAAA,KAAK,EAAEH,KAAhB;AAAuB,MAAA,MAAM,EAAEC,MAA/B;AAAuC,MAAA,IAAI,EAAEC,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEH,GAJD,MAKK,IAAGC,QAAQ,IAAI,aAAf,EAA6B;AAE9B,WAAO,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEH,KAArB;AAA4B,MAAA,MAAM,EAAEC,MAApC;AAA4C,MAAA,IAAI,EAAEC,IAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEH,GAJI,MAKA,IAAGC,QAAQ,IAAI,WAAf,EAA2B;AAE5B,WAAO,oBAAC,SAAD;AAAW,MAAA,KAAK,EAAEH,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAEH,GAJI,MAKA,IAAGG,QAAQ,IAAI,WAAf,EAA2B;AAE5B,WAAQ,oBAAC,aAAD;AAAe,MAAA,KAAK,EAAEH,KAAtB;AAA6B,MAAA,MAAM,EAAEC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AAEH,GAJI,MAIC,IAAGE,QAAQ,IAAI,OAAf,EAAuB;AAEzB,WAAQ,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAEH,KAArB;AAA2B,MAAA,MAAM,EAAEC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AAEH,GAJK,MAID;AACD,WAAO,IAAP;AACH;AAEJ;;AAED,eAAeH,oBAAf","sourcesContent":["import React from 'react';\n\nimport IriComp from './concrete/IriComp';\nimport PrefixedComp from './concrete/PrefixedComp';\nimport BNodeComp from './concrete/BNodeComp';\nimport PrimitiveComp from './concrete/PrimitiveComp';\nimport ShapeRefComp from './concrete/ShapeRefComp';\n\nfunction ComponentTypeFactory (props) {\n\n    const {shape,triple,type,instance} = props;\n\n    if(instance == 'iriRef'){\n        \n        return <IriComp shape={shape} triple={triple} type={type}/>\n\n    }\n    else if(instance == 'prefixedIri'){\n\n        return <PrefixedComp shape={shape} triple={triple} type={type}/>\n\n    }\n    else if(instance == 'bnodeType'){\n\n        return <BNodeComp shape={shape}/>\n\n    }\n    else if(instance == 'primitive'){\n        \n        return  <PrimitiveComp shape={shape} triple={triple}/>\n\n    }else if(instance == 'shape'){\n        \n        return  <ShapeRefComp shape={shape}triple={triple}/>\n\n    }else{\n        return null;\n    }\n                                   \n}\n\nexport default ComponentTypeFactory;\n\n"]},"metadata":{},"sourceType":"module"}