{"ast":null,"code":"import _slicedToArray from\"/home/mistermboy/repositories/shex-author/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext}from'react';import{ShapesContext}from'../../../../App';import Qualifier from'../../utils/Qualifier';import shexUtils from'../../../../utils/shexUtils';function ShapeRefComp(props){var context=useContext(ShapesContext);var shape=props.shape,triple=props.triple;var inlineValue='';if(triple.inlineShape.shape!=null){inlineValue=triple.inlineShape.shape.id;}var _useState=useState(inlineValue),_useState2=_slicedToArray(_useState,2),inlineShape=_useState2[0],setInlineShape=_useState2[1];var _useState3=useState(triple.value.getTypeName()),_useState4=_slicedToArray(_useState3,2),valueType=_useState4[0],setValueType=_useState4[1];var handleInlineChange=function handleInlineChange(e){var shapeId=e.target.value;var inlineShape=null;var inlineSelector='';if(shapeId!=''){inlineShape=shexUtils.getShapeById(context.shapes,shapeId);inlineSelector=inlineShape.id;}triple.getInlineShape().setShape(inlineShape);context.emit();setInlineShape(inlineSelector);};var handleTypeChange=function handleTypeChange(e){var newType=e.target.value;triple.setValue(newType);context.emit();setValueType(newType);};return React.createElement(\"div\",{className:\"row col\"},React.createElement(\"select\",{className:\"col form-control valueInlineShape\",value:inlineShape,onChange:handleInlineChange},React.createElement(\"option\",{value:\"\"}),context.shapes.map(function(shape){return React.createElement(\"option\",{key:shape.id,value:shape.id},'@'+shape.type);})),React.createElement(Qualifier,{triple:triple,scope:\"triple\"}));}export default ShapeRefComp;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/components/shexComponents/types/concrete/ShapeRefComp.js"],"names":["React","useState","useContext","ShapesContext","Qualifier","shexUtils","ShapeRefComp","props","context","shape","triple","inlineValue","inlineShape","id","setInlineShape","value","getTypeName","valueType","setValueType","handleInlineChange","e","shapeId","target","inlineSelector","getShapeById","shapes","getInlineShape","setShape","emit","handleTypeChange","newType","setValue","map","type"],"mappings":"4HAAA,MAAOA,CAAAA,KAAP,EAAcC,QAAd,CAAuBC,UAAvB,KAAwC,OAAxC,CACA,OAAQC,aAAR,KAA4B,iBAA5B,CACA,MAAOC,CAAAA,SAAP,KAAsB,uBAAtB,CAEA,MAAOC,CAAAA,SAAP,KAAsB,6BAAtB,CAEA,QAASC,CAAAA,YAAT,CAAuBC,KAAvB,CAA8B,CAE1B,GAAMC,CAAAA,OAAO,CAAGN,UAAU,CAACC,aAAD,CAA1B,CAF0B,GAGnBM,CAAAA,KAHmB,CAGHF,KAHG,CAGnBE,KAHmB,CAGbC,MAHa,CAGHH,KAHG,CAGbG,MAHa,CAK1B,GAAIC,CAAAA,WAAW,CAAG,EAAlB,CACA,GAAGD,MAAM,CAACE,WAAP,CAAmBH,KAAnB,EAA4B,IAA/B,CAAoC,CAChCE,WAAW,CAAGD,MAAM,CAACE,WAAP,CAAmBH,KAAnB,CAAyBI,EAAvC,CACH,CARyB,cAUWZ,QAAQ,CAACU,WAAD,CAVnB,wCAUnBC,WAVmB,eAUPE,cAVO,8BAWOb,QAAQ,CAACS,MAAM,CAACK,KAAP,CAAaC,WAAb,EAAD,CAXf,yCAWnBC,SAXmB,eAWTC,YAXS,eAc1B,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAACC,CAAD,CAAM,CAC7B,GAAMC,CAAAA,OAAO,CAAGD,CAAC,CAACE,MAAF,CAASP,KAAzB,CACA,GAAIH,CAAAA,WAAW,CAAG,IAAlB,CACA,GAAIW,CAAAA,cAAc,CAAG,EAArB,CACA,GAAGF,OAAO,EAAE,EAAZ,CAAe,CACXT,WAAW,CAAGP,SAAS,CAACmB,YAAV,CAAuBhB,OAAO,CAACiB,MAA/B,CAAsCJ,OAAtC,CAAd,CACAE,cAAc,CAAGX,WAAW,CAACC,EAA7B,CACH,CACDH,MAAM,CAACgB,cAAP,GAAwBC,QAAxB,CAAiCf,WAAjC,EACAJ,OAAO,CAACoB,IAAR,GACAd,cAAc,CAACS,cAAD,CAAd,CACH,CAXD,CAaA,GAAMM,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACT,CAAD,CAAM,CAC3B,GAAIU,CAAAA,OAAO,CAAGV,CAAC,CAACE,MAAF,CAASP,KAAvB,CACAL,MAAM,CAACqB,QAAP,CAAgBD,OAAhB,EACAtB,OAAO,CAACoB,IAAR,GACAV,YAAY,CAACY,OAAD,CAAZ,CACH,CALD,CAQA,MAAQ,4BAAK,SAAS,CAAC,SAAf,EACI,8BAAQ,SAAS,CAAC,mCAAlB,CACQ,KAAK,CAAElB,WADf,CAEQ,QAAQ,CAAEO,kBAFlB,EAGI,8BAAQ,KAAK,CAAC,EAAd,EAHJ,CAKIX,OAAO,CAACiB,MAAR,CAAeO,GAAf,CAAmB,SAAAvB,KAAK,CAAG,CACzB,MAAO,+BAAQ,GAAG,CAAEA,KAAK,CAACI,EAAnB,CAAuB,KAAK,CAAEJ,KAAK,CAACI,EAApC,EAAyC,IAAIJ,KAAK,CAACwB,IAAnD,CAAP,CACD,CAFD,CALJ,CADJ,CAYI,oBAAC,SAAD,EAAW,MAAM,CAAEvB,MAAnB,CAA2B,KAAK,CAAC,QAAjC,EAZJ,CAAR,CAoBH,CAED,cAAeJ,CAAAA,YAAf","sourcesContent":["import React,{useState,useContext} from 'react';\nimport {ShapesContext} from '../../../../App';\nimport Qualifier from '../../utils/Qualifier';\n\nimport shexUtils from '../../../../utils/shexUtils';\n\nfunction ShapeRefComp (props) {\n\n    const context = useContext(ShapesContext);\n    const {shape,triple} = props;\n\n    let inlineValue = '';\n    if(triple.inlineShape.shape != null){\n        inlineValue = triple.inlineShape.shape.id;\n    }\n    \n    const [inlineShape,setInlineShape] = useState(inlineValue);\n    const [valueType,setValueType] = useState(triple.value.getTypeName())\n\n\n    const handleInlineChange = (e) =>{\n        const shapeId = e.target.value;\n        let inlineShape = null;\n        let inlineSelector = '';\n        if(shapeId!=''){\n            inlineShape = shexUtils.getShapeById(context.shapes,shapeId);\n            inlineSelector = inlineShape.id;\n        }\n        triple.getInlineShape().setShape(inlineShape);\n        context.emit();\n        setInlineShape(inlineSelector);\n    }\n\n    const handleTypeChange = (e) =>{\n        let newType = e.target.value;\n        triple.setValue(newType);\n        context.emit();\n        setValueType(newType);\n    }\n\n\n    return (<div className='row col'>\n                <select className=\"col form-control valueInlineShape\"\n                        value={inlineShape}\n                        onChange={handleInlineChange}>\n                    <option value=''></option>\n                    { \n                    context.shapes.map(shape =>{\n                      return <option key={shape.id} value={shape.id}>{'@'+shape.type}</option>\n                    })\n                  }\n                </select>\n\n                <Qualifier triple={triple} scope='triple'/>\n            </div>\n\n    \n    \n    \n    );\n    \n}\n\nexport default ShapeRefComp;\n\n"]},"metadata":{},"sourceType":"module"}