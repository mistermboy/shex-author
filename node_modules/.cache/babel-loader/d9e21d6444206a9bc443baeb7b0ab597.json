{"ast":null,"code":"import _classCallCheck from\"/home/mistermboy/repositories/shex-author/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/mistermboy/repositories/shex-author/node_modules/@babel/runtime/helpers/esm/createClass\";import PrefixedIri from'./concreteTypes/prefixedIri';import IriRef from'./concreteTypes/iriRef';import BNode from'./concreteTypes/bNode';import Primitive from'./concreteTypes/primitive';import ShapeReference from'./concreteTypes/shapeReference';import Literal from'./concreteTypes/kinds/literal';import NonLiteral from'./concreteTypes/kinds/nonLiteral';import IriKind from'./concreteTypes/kinds/iriKind';import BNodeKind from'./concreteTypes/kinds/bNodeKind';var TypesFactory=/*#__PURE__*/function(){function TypesFactory(){_classCallCheck(this,TypesFactory);}_createClass(TypesFactory,[{key:\"createType\",value:function createType(type,context){var retType;if(type=='iriRef'){retType=new IriRef(context);}if(type=='prefixedIri'){retType=new PrefixedIri(context);}if(type=='bnodeType'){retType=new BNode(context);}if(type=='primitive'){retType=new Primitive();}if(type=='shape'){retType=new ShapeReference('');}if(type=='literal'){retType=new Literal(context);}if(type=='nonliteral'){retType=new NonLiteral(context);}if(type=='iri'){retType=new IriKind(context);}if(type=='bnode'){retType=new BNodeKind(context);}return retType;}}]);return TypesFactory;}();export default TypesFactory;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/entities/shexEntities/types/typesFactory.js"],"names":["PrefixedIri","IriRef","BNode","Primitive","ShapeReference","Literal","NonLiteral","IriKind","BNodeKind","TypesFactory","type","context","retType"],"mappings":"sPAAA,MAAOA,CAAAA,WAAP,KAAuB,6BAAvB,CACA,MAAOC,CAAAA,MAAP,KAAkB,wBAAlB,CACA,MAAOC,CAAAA,KAAP,KAAiB,uBAAjB,CACA,MAAOC,CAAAA,SAAP,KAAqB,2BAArB,CACA,MAAOC,CAAAA,cAAP,KAA0B,gCAA1B,CAEA,MAAOC,CAAAA,OAAP,KAAmB,+BAAnB,CACA,MAAOC,CAAAA,UAAP,KAAsB,kCAAtB,CACA,MAAOC,CAAAA,OAAP,KAAmB,+BAAnB,CACA,MAAOC,CAAAA,SAAP,KAAqB,iCAArB,C,GAEMC,CAAAA,Y,4JAESC,I,CAAKC,O,CAAQ,CAEpB,GAAIC,CAAAA,OAAJ,CACA,GAAGF,IAAI,EAAI,QAAX,CAAoB,CAChBE,OAAO,CAAG,GAAIX,CAAAA,MAAJ,CAAWU,OAAX,CAAV,CACH,CAED,GAAGD,IAAI,EAAI,aAAX,CAAyB,CACrBE,OAAO,CAAG,GAAIZ,CAAAA,WAAJ,CAAgBW,OAAhB,CAAV,CACH,CAED,GAAGD,IAAI,EAAI,WAAX,CAAuB,CACnBE,OAAO,CAAG,GAAIV,CAAAA,KAAJ,CAAUS,OAAV,CAAV,CACH,CAED,GAAGD,IAAI,EAAI,WAAX,CAAuB,CACnBE,OAAO,CAAG,GAAIT,CAAAA,SAAJ,EAAV,CACH,CAED,GAAGO,IAAI,EAAI,OAAX,CAAmB,CACfE,OAAO,CAAG,GAAIR,CAAAA,cAAJ,CAAmB,EAAnB,CAAV,CACH,CAED,GAAGM,IAAI,EAAI,SAAX,CAAqB,CACjBE,OAAO,CAAG,GAAIP,CAAAA,OAAJ,CAAYM,OAAZ,CAAV,CACH,CAED,GAAGD,IAAI,EAAI,YAAX,CAAwB,CACpBE,OAAO,CAAG,GAAIN,CAAAA,UAAJ,CAAeK,OAAf,CAAV,CACH,CAED,GAAGD,IAAI,EAAI,KAAX,CAAiB,CACbE,OAAO,CAAG,GAAIL,CAAAA,OAAJ,CAAYI,OAAZ,CAAV,CACH,CAED,GAAGD,IAAI,EAAI,OAAX,CAAmB,CACfE,OAAO,CAAG,GAAIJ,CAAAA,SAAJ,CAAcG,OAAd,CAAV,CACH,CAGD,MAAOC,CAAAA,OAAP,CAEH,C,4BAKL,cAAeH,CAAAA,YAAf","sourcesContent":["import PrefixedIri from'./concreteTypes/prefixedIri';\nimport IriRef from'./concreteTypes/iriRef';\nimport BNode from'./concreteTypes/bNode';\nimport Primitive from'./concreteTypes/primitive';\nimport ShapeReference from'./concreteTypes/shapeReference';\n\nimport Literal from'./concreteTypes/kinds/literal';\nimport NonLiteral from'./concreteTypes/kinds/nonLiteral';\nimport IriKind from'./concreteTypes/kinds/iriKind';\nimport BNodeKind from'./concreteTypes/kinds/bNodeKind';\n\nclass TypesFactory{\n\n    createType(type,context){\n\n        let retType;\n        if(type == 'iriRef'){\n            retType = new IriRef(context);\n        }\n        \n        if(type == 'prefixedIri'){\n            retType = new PrefixedIri(context);\n        }\n\n        if(type == 'bnodeType'){\n            retType = new BNode(context);\n        }\n\n        if(type == 'primitive'){\n            retType = new Primitive();\n        }\n\n        if(type == 'shape'){\n            retType = new ShapeReference('');\n        }\n\n        if(type == 'literal'){\n            retType = new Literal(context);\n        }\n\n        if(type == 'nonliteral'){\n            retType = new NonLiteral(context);\n        }\n\n        if(type == 'iri'){\n            retType = new IriKind(context);\n        }\n\n        if(type == 'bnode'){\n            retType = new BNodeKind(context);\n        }\n \n\n        return retType;\n\n    }\n\n\n}\n\nexport default TypesFactory;"]},"metadata":{},"sourceType":"module"}