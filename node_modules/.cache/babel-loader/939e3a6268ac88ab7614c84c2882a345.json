{"ast":null,"code":"import _slicedToArray from \"/home/mistermboy/repositories/shex-author/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mistermboy/repositories/shex-author/src/components/shexComponents/types/concrete/PrefixedComp.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { ShapesContext } from '../../../../App';\nimport { getPrefix } from '../../../../utils/prefixUtils';\n\nfunction PrefixedComp(props) {\n  const context = useContext(ShapesContext);\n  const shape = props.shape,\n        triple = props.triple,\n        type = props.type;\n  let initialValue = shape.type.value; //We can't initializae initialPrefix \n  //beacause if it is called by a triple \n  //we don't know its shape's type\n\n  let initialPrefix;\n\n  if (type == 'shape') {\n    initialPrefix = shape.type.prefix.prefixValue;\n  } else if (type == 'triple') {\n    initialValue = triple.type.value;\n    initialPrefix = triple.type.prefix.prefixValue;\n  } else {\n    initialValue = triple.value.value;\n    initialPrefix = triple.value.prefix.prefixValue;\n  }\n\n  const _useState = useState(initialValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        value = _useState2[0],\n        setValue = _useState2[1];\n\n  const _useState3 = useState(initialPrefix),\n        _useState4 = _slicedToArray(_useState3, 2),\n        prefix = _useState4[0],\n        setPrefix = _useState4[1];\n  /**\n    Esto igual se puede quitar\n   */\n\n\n  const getPrefixContex = () => {\n    let prefix = 'prefixShape';\n    let context = shape.type.context;\n\n    if (context == 'tripleName') {\n      prefix = 'prefixTriple';\n    }\n\n    if (context == 'valueName') {\n      prefix = 'prefixValue';\n    }\n\n    return prefix;\n  };\n\n  const handleTypeChange = e => {\n    const value = e.target.value;\n\n    if (type == 'shape') {\n      shape.type.setValue(value);\n    } else if (type == 'triple') {\n      triple.type.setValue(value);\n    } else {\n      triple.value.setValue(value);\n    }\n\n    context.emit();\n    setValue(value);\n  };\n\n  const handlePrefixChange = e => {\n    let prefix = getPrefix(e.target.value);\n\n    if (type == 'shape') {\n      shape.type.setPrefix(prefix);\n    } else if (type == 'triple') {\n      triple.type.setPrefix(prefix);\n    } else {\n      triple.value.setPrefix(prefix);\n    }\n\n    context.emit();\n    setPrefix(e.target.value);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"row col-6\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: getPrefixContex() + ' col-5 form-control',\n    value: prefix,\n    onChange: handlePrefixChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, context.prefixes.map(pre => {\n    return React.createElement(\"option\", {\n      key: pre.key,\n      value: pre.val,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, pre.key);\n  })), React.createElement(\"input\", {\n    className: shape.type.value + ' form-control col',\n    context: \"text\",\n    value: value,\n    onChange: handleTypeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }));\n}\n\nexport default PrefixedComp;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/components/shexComponents/types/concrete/PrefixedComp.js"],"names":["React","useState","useContext","useEffect","ShapesContext","getPrefix","PrefixedComp","props","context","shape","triple","type","initialValue","value","initialPrefix","prefix","prefixValue","setValue","setPrefix","getPrefixContex","handleTypeChange","e","target","emit","handlePrefixChange","prefixes","map","pre","key","val"],"mappings":"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","sourcesContent":["import React,{useState,useContext,useEffect} from 'react';\nimport {ShapesContext} from '../../../../App';\nimport {getPrefix} from '../../../../utils/prefixUtils';\n\nfunction PrefixedComp (props) {\n\n    const context = useContext(ShapesContext);\n \n    const {shape,triple,type} = props;\n\n    let initialValue = shape.type.value;\n    //We can't initializae initialPrefix \n    //beacause if it is called by a triple \n    //we don't know its shape's type\n    let initialPrefix; \n    if(type=='shape'){\n      initialPrefix = shape.type.prefix.prefixValue;\n    }else if(type =='triple'){\n      initialValue = triple.type.value;\n      initialPrefix = triple.type.prefix.prefixValue;\n    }else{ \n      initialValue = triple.value.value;\n      initialPrefix = triple.value.prefix.prefixValue;\n    }\n\n    const [value,setValue] = useState(initialValue);\n    const [prefix,setPrefix] = useState(initialPrefix);\n\n\n  /**\n    Esto igual se puede quitar\n   */\n   const getPrefixContex = ()=>{\n        let prefix = 'prefixShape';\n        let context = shape.type.context;\n        if( context == 'tripleName'){\n            prefix = 'prefixTriple';\n        }\n        if( context == 'valueName'){\n            prefix = 'prefixValue';\n        }\n        return prefix;\n    }\n\n    const handleTypeChange = (e) =>{\n        const value = e.target.value;\n        if(type == 'shape'){\n          shape.type.setValue(value);\n        }else if(type == 'triple'){\n          triple.type.setValue(value);\n        }else{\n          triple.value.setValue(value);            \n        }\n        context.emit();\n        setValue(value);\n    }\n\n    const handlePrefixChange = (e) =>{\n      let prefix = getPrefix(e.target.value);\n\n      if(type == 'shape'){\n        shape.type.setPrefix(prefix);\n      }else if(type == 'triple'){\n        triple.type.setPrefix(prefix);  \n      }else{\n        triple.value.setPrefix(prefix);  \n      }\n\n      context.emit();\n      setPrefix(e.target.value);\n    }\n\n    return  (<div className='row col-6'>\n                <select className={getPrefixContex()+' col-5 form-control'}\n                        value={prefix}\n                        onChange={handlePrefixChange}>\n                 \n                  { \n                    context.prefixes.map((pre) =>{\n                      return <option key={pre.key} value={pre.val}>{pre.key}</option>\n                    })\n                  }\n                </select>\n                   \n                <input  className={shape.type.value+' form-control col'} \n                        context=\"text\" \n                        value={value}\n                        onChange={handleTypeChange} />\n               \n              </div>);\n              \n                               \n    \n\n}\n\n\n    \n\nexport default PrefixedComp;\n\n"]},"metadata":{},"sourceType":"module"}