{"ast":null,"code":"import TypesFactory from './types/typesFactory';\nimport IrirRef from './types/concreteTypes/iriRef';\nimport BlankKind from './types/concreteTypes/kinds/blankKind';\n\nclass Shape {\n  constructor(id, type = new IrirRef('shapeName'), triples = [], qualifier = new BlankKind()) {\n    this.id = id;\n    this.type = type;\n    this.triples = triples;\n    this.triplesCount = this.triples.length;\n    this.factory = new TypesFactory();\n    this.qualifier = qualifier;\n  }\n\n  addTriple(triple) {\n    this.triples.push(triple);\n    this.triplesCount++;\n  }\n\n  removeTriple(tripleId) {\n    this.triples = this.triples.filter(function (obj) {\n      return obj.id != tripleId;\n    });\n  }\n\n  getTriplesCount() {\n    return this.triplesCount;\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  getTriples() {\n    return this.triples;\n  }\n\n  setTriples(triples) {\n    this.triples = triples;\n  }\n\n  getQualifier() {\n    return this.qualifier;\n  }\n\n  setQualifier(qualifier) {\n    this.qualifier = this.factory.createType(qualifier, 'shapeName');\n  }\n\n  setType(type) {\n    this.type = this.factory.createType(type, 'shapeName');\n  }\n\n  toString() {\n    let str = this.type + ' ' + this.qualifier + ' {\\n';\n    this.triples.forEach(triple => {\n      str += triple;\n    });\n    str += \"}\\n\\n\";\n    return str;\n  }\n\n}\n\nexport default Shape;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/entities/shexEntities/shape.js"],"names":["TypesFactory","IrirRef","BlankKind","Shape","constructor","id","type","triples","qualifier","triplesCount","length","factory","addTriple","triple","push","removeTriple","tripleId","filter","obj","getTriplesCount","getId","getType","getTriples","setTriples","getQualifier","setQualifier","createType","setType","toString","str","forEach"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,sBAAzB;AAEA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,SAAP,MAAsB,uCAAtB;;AAEA,MAAMC,KAAN,CAAY;AAEVC,EAAAA,WAAW,CAACC,EAAD,EAAIC,IAAI,GAAC,IAAIL,OAAJ,CAAY,WAAZ,CAAT,EAAkCM,OAAO,GAAG,EAA5C,EAA+CC,SAAS,GAAC,IAAIN,SAAJ,EAAzD,EAA0E;AACjF,SAAKG,EAAL,GAAUA,EAAV;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKE,YAAL,GAAoB,KAAKF,OAAL,CAAaG,MAAjC;AACA,SAAKC,OAAL,GAAe,IAAIX,YAAJ,EAAf;AACA,SAAKQ,SAAL,GAAiBA,SAAjB;AACD;;AAEDI,EAAAA,SAAS,CAACC,MAAD,EAAQ;AACb,SAAKN,OAAL,CAAaO,IAAb,CAAkBD,MAAlB;AACA,SAAKJ,YAAL;AACH;;AAEDM,EAAAA,YAAY,CAACC,QAAD,EAAU;AACpB,SAAKT,OAAL,GAAe,KAAKA,OAAL,CAAaU,MAAb,CAAoB,UAAUC,GAAV,EAAgB;AACjD,aAAOA,GAAG,CAACb,EAAJ,IAAUW,QAAjB;AACD,KAFc,CAAf;AAGD;;AAEDG,EAAAA,eAAe,GAAE;AACf,WAAO,KAAKV,YAAZ;AACD;;AAGDW,EAAAA,KAAK,GAAE;AACL,WAAO,KAAKf,EAAZ;AACD;;AAEDgB,EAAAA,OAAO,GAAE;AACP,WAAO,KAAKf,IAAZ;AACD;;AAGDgB,EAAAA,UAAU,GAAG;AACT,WAAO,KAAKf,OAAZ;AACF;;AAEFgB,EAAAA,UAAU,CAAChB,OAAD,EAAS;AACjB,SAAKA,OAAL,GAAeA,OAAf;AACD;;AAEDiB,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKhB,SAAZ;AACF;;AAEFiB,EAAAA,YAAY,CAACjB,SAAD,EAAW;AACrB,SAAKA,SAAL,GAAiB,KAAKG,OAAL,CAAae,UAAb,CAAwBlB,SAAxB,EAAkC,WAAlC,CAAjB;AACD;;AAGDmB,EAAAA,OAAO,CAACrB,IAAD,EAAM;AACT,SAAKA,IAAL,GAAY,KAAKK,OAAL,CAAae,UAAb,CAAwBpB,IAAxB,EAA6B,WAA7B,CAAZ;AACF;;AAGDsB,EAAAA,QAAQ,GAAE;AAET,QAAIC,GAAG,GAAG,KAAKvB,IAAL,GAAU,GAAV,GAAc,KAAKE,SAAnB,GAA6B,MAAvC;AACA,SAAKD,OAAL,CAAauB,OAAb,CAAqBjB,MAAM,IAAI;AAC7BgB,MAAAA,GAAG,IAAEhB,MAAL;AACD,KAFD;AAIAgB,IAAAA,GAAG,IAAE,OAAL;AACA,WAAOA,GAAP;AAEA;;AApEM;;AAyEZ,eAAe1B,KAAf","sourcesContent":["import TypesFactory from './types/typesFactory';\n\nimport IrirRef from './types/concreteTypes/iriRef';\nimport BlankKind from './types/concreteTypes/kinds/blankKind';\n\nclass Shape {\n\n  constructor(id,type=new IrirRef('shapeName'),triples = [],qualifier=new BlankKind()) {\n      this.id = id;\n      this.type = type;\n      this.triples = triples;\n      this.triplesCount = this.triples.length;\n      this.factory = new TypesFactory();\n      this.qualifier = qualifier;\n    }\n\n    addTriple(triple){\n        this.triples.push(triple);\n        this.triplesCount++;\n    }\n\n    removeTriple(tripleId){\n      this.triples = this.triples.filter(function( obj ) {\n        return obj.id != tripleId\n      });\n    }\n\n    getTriplesCount(){\n      return this.triplesCount;\n    }\n\n\n    getId(){\n      return this.id;\n    }\n\n    getType(){\n      return this.type; \n    }\n\n\n    getTriples() {\n        return this.triples;\n     }\n\n    setTriples(triples){\n      this.triples = triples;\n    }\n\n    getQualifier() {\n        return this.qualifier;\n     }\n\n    setQualifier(qualifier){\n      this.qualifier = this.factory.createType(qualifier,'shapeName');\n    }\n    \n\n    setType(type){\n        this.type = this.factory.createType(type,'shapeName');\n     }\n\n\n     toString(){\n    \n      let str = this.type+' '+this.qualifier+' {\\n'\n      this.triples.forEach(triple => {\n        str+=triple;\n      });\n\n      str+=\"}\\n\\n\"\n      return str\n\n     }\n\n\n  }\n\nexport default Shape;"]},"metadata":{},"sourceType":"module"}