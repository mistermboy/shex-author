{"ast":null,"code":"import PrefixedIri from './concreteTypes/prefixedIri';\nimport IriRef from './concreteTypes/iriRef';\nimport BNode from './concreteTypes/bNode';\nimport Primitive from './concreteTypes/primitive';\nimport ShapeReference from './concreteTypes/shapeReference';\nimport Literal from './concreteTypes/kinds/literal';\nimport NonLiteral from './concreteTypes/kinds/nonLiteral';\nimport IriKind from './concreteTypes/kinds/iriKind';\nimport BNodeKind from './concreteTypes/kinds/bNodeKind';\n\nclass TypesFactory {\n  createType(type, context) {\n    let retType;\n\n    if (type == 'iriRef') {\n      retType = new IriRef(context);\n    }\n\n    if (type == 'prefixedIri') {\n      retType = new PrefixedIri(context);\n    }\n\n    if (type == 'bnodeType') {\n      retType = new BNode(context);\n    }\n\n    if (type == 'primitive') {\n      retType = new Primitive();\n    }\n\n    if (type == 'shape') {\n      retType = new ShapeReference('');\n    }\n\n    if (type == 'literal') {\n      retType = new Literal(context);\n    }\n\n    if (type == 'nonliteral') {\n      retType = new NonLiteral(context);\n    }\n\n    if (type == 'iri') {\n      retType = new IriKind(context);\n    }\n\n    if (type == 'bnode') {\n      retType = new BNodeKind(context);\n    }\n\n    return retType;\n  }\n\n}\n\nexport default TypesFactory;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/entities/shexEntities/types/typesFactory.js"],"names":["PrefixedIri","IriRef","BNode","Primitive","ShapeReference","Literal","NonLiteral","IriKind","BNodeKind","TypesFactory","createType","type","context","retType"],"mappings":"AAAA,OAAOA,WAAP,MAAuB,6BAAvB;AACA,OAAOC,MAAP,MAAkB,wBAAlB;AACA,OAAOC,KAAP,MAAiB,uBAAjB;AACA,OAAOC,SAAP,MAAqB,2BAArB;AACA,OAAOC,cAAP,MAA0B,gCAA1B;AAEA,OAAOC,OAAP,MAAmB,+BAAnB;AACA,OAAOC,UAAP,MAAsB,kCAAtB;AACA,OAAOC,OAAP,MAAmB,+BAAnB;AACA,OAAOC,SAAP,MAAqB,iCAArB;;AAEA,MAAMC,YAAN,CAAkB;AAEdC,EAAAA,UAAU,CAACC,IAAD,EAAMC,OAAN,EAAc;AAEpB,QAAIC,OAAJ;;AACA,QAAGF,IAAI,IAAI,QAAX,EAAoB;AAChBE,MAAAA,OAAO,GAAG,IAAIZ,MAAJ,CAAWW,OAAX,CAAV;AACH;;AAED,QAAGD,IAAI,IAAI,aAAX,EAAyB;AACrBE,MAAAA,OAAO,GAAG,IAAIb,WAAJ,CAAgBY,OAAhB,CAAV;AACH;;AAED,QAAGD,IAAI,IAAI,WAAX,EAAuB;AACnBE,MAAAA,OAAO,GAAG,IAAIX,KAAJ,CAAUU,OAAV,CAAV;AACH;;AAED,QAAGD,IAAI,IAAI,WAAX,EAAuB;AACnBE,MAAAA,OAAO,GAAG,IAAIV,SAAJ,EAAV;AACH;;AAED,QAAGQ,IAAI,IAAI,OAAX,EAAmB;AACfE,MAAAA,OAAO,GAAG,IAAIT,cAAJ,CAAmB,EAAnB,CAAV;AACH;;AAED,QAAGO,IAAI,IAAI,SAAX,EAAqB;AACjBE,MAAAA,OAAO,GAAG,IAAIR,OAAJ,CAAYO,OAAZ,CAAV;AACH;;AAED,QAAGD,IAAI,IAAI,YAAX,EAAwB;AACpBE,MAAAA,OAAO,GAAG,IAAIP,UAAJ,CAAeM,OAAf,CAAV;AACH;;AAED,QAAGD,IAAI,IAAI,KAAX,EAAiB;AACbE,MAAAA,OAAO,GAAG,IAAIN,OAAJ,CAAYK,OAAZ,CAAV;AACH;;AAED,QAAGD,IAAI,IAAI,OAAX,EAAmB;AACfE,MAAAA,OAAO,GAAG,IAAIL,SAAJ,CAAcI,OAAd,CAAV;AACH;;AAGD,WAAOC,OAAP;AAEH;;AA5Ca;;AAiDlB,eAAeJ,YAAf","sourcesContent":["import PrefixedIri from'./concreteTypes/prefixedIri';\nimport IriRef from'./concreteTypes/iriRef';\nimport BNode from'./concreteTypes/bNode';\nimport Primitive from'./concreteTypes/primitive';\nimport ShapeReference from'./concreteTypes/shapeReference';\n\nimport Literal from'./concreteTypes/kinds/literal';\nimport NonLiteral from'./concreteTypes/kinds/nonLiteral';\nimport IriKind from'./concreteTypes/kinds/iriKind';\nimport BNodeKind from'./concreteTypes/kinds/bNodeKind';\n\nclass TypesFactory{\n\n    createType(type,context){\n\n        let retType;\n        if(type == 'iriRef'){\n            retType = new IriRef(context);\n        }\n        \n        if(type == 'prefixedIri'){\n            retType = new PrefixedIri(context);\n        }\n\n        if(type == 'bnodeType'){\n            retType = new BNode(context);\n        }\n\n        if(type == 'primitive'){\n            retType = new Primitive();\n        }\n\n        if(type == 'shape'){\n            retType = new ShapeReference('');\n        }\n\n        if(type == 'literal'){\n            retType = new Literal(context);\n        }\n\n        if(type == 'nonliteral'){\n            retType = new NonLiteral(context);\n        }\n\n        if(type == 'iri'){\n            retType = new IriKind(context);\n        }\n\n        if(type == 'bnode'){\n            retType = new BNodeKind(context);\n        }\n \n\n        return retType;\n\n    }\n\n\n}\n\nexport default TypesFactory;"]},"metadata":{},"sourceType":"module"}