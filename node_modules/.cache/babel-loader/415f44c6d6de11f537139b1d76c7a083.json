{"ast":null,"code":"import Codemirror from 'codemirror';\nimport Editor from '../entities/editor';\nimport Shape from '../entities/shexEntities/shape';\nlet shapesCount = 0;\n\nfunction addShape(shapes) {\n  const id = shapes.length + shapesCount++;\n  const newShape = new Shape(id);\n  let newShapes = [];\n  newShapes = Object.assign(newShapes, shapes);\n  newShapes.push(newShape);\n  return newShape;\n}\n\nfunction deleteShape(shapes, shapeId, confirm) {\n  if (!confirm) {\n    confirm = window.confirm('Are you sure?');\n  }\n\n  if (confirm == true) {\n    const newShapes = shapes.filter(shape => shape.id != shapeId);\n    emit(newShapes);\n    return newShapes;\n  }\n\n  return shapes;\n}\n\nfunction getShapeById(shapes, shapeId) {\n  return shapes.filter(function (obj) {\n    return obj.id == shapeId;\n  })[0];\n}\n\nfunction getShapeByName(shapes, name) {\n  for (let s in shapes) {\n    if (shapes[s].getType().getValue() == name) {\n      return shapes[s];\n    }\n  }\n}\n\nfunction getTripleById(shape, tripleId) {\n  return shape.getTriples().filter(function (obj) {\n    return obj.id == tripleId;\n  })[0];\n}\n\nfunction emit(newShapes) {\n  const yashe = Editor.getInstance().getYashe();\n\n  if (yashe != undefined) {\n    Codemirror.signal(yashe, 'humanEvent', newShapes);\n  }\n}\n\nconst shexUtils = {\n  addShape: addShape,\n  deleteShape: deleteShape,\n  getShapeById: getShapeById,\n  getShapeByName: getShapeByName,\n  getTripleById: getTripleById,\n  emit: emit\n};\nexport default shexUtils;","map":{"version":3,"sources":["/home/mistermboy/repositories/shex-author/src/utils/shexUtils.js"],"names":["Codemirror","Editor","Shape","shapesCount","addShape","shapes","id","length","newShape","newShapes","Object","assign","push","deleteShape","shapeId","confirm","window","filter","shape","emit","getShapeById","obj","getShapeByName","name","s","getType","getValue","getTripleById","tripleId","getTriples","yashe","getInstance","getYashe","undefined","signal","shexUtils"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AAEA,IAAIC,WAAW,GAAG,CAAlB;;AAEA,SAASC,QAAT,CAAmBC,MAAnB,EAA0B;AAEtB,QAAMC,EAAE,GAAGD,MAAM,CAACE,MAAP,GAAgBJ,WAAW,EAAtC;AACA,QAAMK,QAAQ,GAAG,IAAIN,KAAJ,CAAUI,EAAV,CAAjB;AAEA,MAAIG,SAAS,GAAG,EAAhB;AACAA,EAAAA,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAcF,SAAd,EAAyBJ,MAAzB,CAAZ;AACAI,EAAAA,SAAS,CAACG,IAAV,CAAeJ,QAAf;AAEC,SAAOA,QAAP;AACJ;;AAED,SAASK,WAAT,CAAqBR,MAArB,EAA4BS,OAA5B,EAAoCC,OAApC,EAA6C;AACzC,MAAG,CAACA,OAAJ,EAAY;AACRA,IAAAA,OAAO,GAAGC,MAAM,CAACD,OAAP,CAAe,eAAf,CAAV;AACH;;AACD,MAAIA,OAAO,IAAI,IAAf,EAAqB;AACjB,UAAMN,SAAS,GAAGJ,MAAM,CAACY,MAAP,CAAcC,KAAK,IAAIA,KAAK,CAACZ,EAAN,IAAYQ,OAAnC,CAAlB;AACAK,IAAAA,IAAI,CAACV,SAAD,CAAJ;AACA,WAAOA,SAAP;AACH;;AACD,SAAOJ,MAAP;AACH;;AAED,SAASe,YAAT,CAAsBf,MAAtB,EAA6BS,OAA7B,EAAsC;AAClC,SAAOT,MAAM,CAACY,MAAP,CAAc,UAAUI,GAAV,EAAgB;AACjC,WAAOA,GAAG,CAACf,EAAJ,IAAUQ,OAAjB;AACH,GAFM,EAEJ,CAFI,CAAP;AAGH;;AAED,SAASQ,cAAT,CAAwBjB,MAAxB,EAA+BkB,IAA/B,EAAqC;AACjC,OAAI,IAAIC,CAAR,IAAanB,MAAb,EAAoB;AAChB,QAAGA,MAAM,CAACmB,CAAD,CAAN,CAAUC,OAAV,GAAoBC,QAApB,MAAkCH,IAArC,EAA0C;AACtC,aAAOlB,MAAM,CAACmB,CAAD,CAAb;AACH;AACJ;AACJ;;AAGD,SAASG,aAAT,CAAuBT,KAAvB,EAA6BU,QAA7B,EAAuC;AACnC,SAAOV,KAAK,CAACW,UAAN,GAAmBZ,MAAnB,CAA0B,UAAUI,GAAV,EAAgB;AAC7C,WAAOA,GAAG,CAACf,EAAJ,IAAUsB,QAAjB;AACH,GAFM,EAEJ,CAFI,CAAP;AAGH;;AAGD,SAAST,IAAT,CAAcV,SAAd,EAAyB;AACrB,QAAMqB,KAAK,GAAG7B,MAAM,CAAC8B,WAAP,GAAqBC,QAArB,EAAd;;AACA,MAAGF,KAAK,IAAEG,SAAV,EAAoB;AAChBjC,IAAAA,UAAU,CAACkC,MAAX,CAAkBJ,KAAlB,EAAwB,YAAxB,EAAqCrB,SAArC;AACH;AACJ;;AAGD,MAAM0B,SAAS,GAAG;AACd/B,EAAAA,QAAQ,EAACA,QADK;AAEdS,EAAAA,WAAW,EAACA,WAFE;AAGdO,EAAAA,YAAY,EAACA,YAHC;AAIdE,EAAAA,cAAc,EAACA,cAJD;AAKdK,EAAAA,aAAa,EAACA,aALA;AAMdR,EAAAA,IAAI,EAACA;AANS,CAAlB;AASA,eAAegB,SAAf","sourcesContent":["import Codemirror from 'codemirror';\nimport Editor from '../entities/editor';\nimport Shape from '../entities/shexEntities/shape';\n\nlet shapesCount = 0;\n\nfunction addShape (shapes){\n\n    const id = shapes.length + shapesCount++;\n    const newShape = new Shape(id);\n    \n    let newShapes = [];\n    newShapes = Object.assign(newShapes, shapes);\n    newShapes.push(newShape)\n    \n     return newShape;    \n}\n\nfunction deleteShape(shapes,shapeId,confirm) {\n    if(!confirm){\n        confirm = window.confirm('Are you sure?');\n    }\n    if (confirm == true) {\n        const newShapes = shapes.filter(shape => shape.id != shapeId);\n        emit(newShapes);\n        return newShapes;\n    }\n    return shapes;\n}\n\nfunction getShapeById(shapes,shapeId) {\n    return shapes.filter(function( obj ) {\n        return obj.id == shapeId\n    })[0];\n}\n\nfunction getShapeByName(shapes,name) {\n    for(let s in shapes){\n        if(shapes[s].getType().getValue() == name){\n            return shapes[s];\n        }\n    }\n}\n\n\nfunction getTripleById(shape,tripleId) {\n    return shape.getTriples().filter(function( obj ) {\n        return obj.id == tripleId\n    })[0];\n}\n\n\nfunction emit(newShapes) {\n    const yashe = Editor.getInstance().getYashe();\n    if(yashe!=undefined){\n        Codemirror.signal(yashe,'humanEvent',newShapes);\n    }\n}\n\n\nconst shexUtils = {\n    addShape:addShape,\n    deleteShape:deleteShape,\n    getShapeById:getShapeById,\n    getShapeByName:getShapeByName,\n    getTripleById:getTripleById,\n    emit:emit\n}\n\nexport default shexUtils;"]},"metadata":{},"sourceType":"module"}