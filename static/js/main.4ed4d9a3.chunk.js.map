{"version":3,"sources":["logo.svg","entities/editor.js","entities/shexEntities/types/type.js","entities/shexEntities/shexUtils/prefix.js","entities/shexEntities/types/concreteTypes/prefixedIri.js","entities/shexEntities/types/concreteTypes/iriRef.js","entities/shexEntities/types/concreteTypes/bNode.js","entities/shexEntities/types/concreteTypes/primitive.js","entities/shexEntities/types/concreteTypes/shapeReference.js","entities/shexEntities/types/concreteTypes/kinds/literal.js","entities/shexEntities/types/concreteTypes/kinds/nonLiteral.js","entities/shexEntities/types/concreteTypes/kinds/iriKind.js","entities/shexEntities/types/concreteTypes/kinds/bNodeKind.js","entities/shexEntities/types/typesFactory.js","entities/shexEntities/types/concreteTypes/kinds/blankKind.js","entities/shexEntities/shape.js","utils/shexUtils.js","utils/tokenUtils.js","entities/shexEntities/shexUtils/inlineShape.js","entities/shexEntities/triple.js","utils/yasheUtils.js","components/EditorComp.js","components/shexComponents/types/concrete/IriComp.js","components/shexComponents/types/concrete/PrefixedComp.js","utils/prefixUtils.js","components/shexComponents/types/concrete/BNodeComp.js","components/shexComponents/types/concrete/PrimitiveComp.js","components/shexComponents/qualifier/Qualifier.js","components/shexComponents/types/concrete/ShapeRefComp.js","components/shexComponents/types/FactoryTypeComp.js","components/shexComponents/types/TripleTypeComp.js","components/shexComponents/types/ValueTypeComp.js","components/shexComponents/cardinality/CardinalityComp.js","components/shexComponents/ValueComponent.js","components/shexComponents/TripleComponent.js","components/shexComponents/types/ShapeTypeComp.js","components/shexComponents/ShapeComponent.js","components/AssistantComp.js","components/navComponents/PrefixSelector.js","utils/rdfUtils.js","components/navComponents/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Editor","EditorClass","this","getYashe","yashe","setYashe","getPrefixes","definedPrefixes","getInstance","getDefinedPrefixes","prefixes","pre","draw","shapes","newContent","forEach","element","toString","setValue","instance","Type","value","Prefix","prefixName","prefixValue","PrefixedIri","context","prefix","getPrefix","getPrefixName","getValue","IriRef","BNode","Primitive","ShapeReference","Literal","NonLiteral","IriKind","BNodeKind","TypesFactory","type","retType","BlankKind","Shape","id","IrirRef","triples","qualifier","triplesCount","length","factory","triple","push","tripleId","filter","obj","createType","str","shapesCount","emit","newShapes","undefined","Codemirror","signal","inlines","shexUtils","addShape","newShape","Object","assign","deleteShape","shapeId","confirm","window","shape","getShapeById","getShapeByName","name","s","getType","getTripleById","getTriples","InlineShape","Triple","inlineShape","cardinality","values","valuesCount","getInlineShape","getCardinality","PRIMITIVES","getTriple","singleTriple","inlineName","ref","index","token","string","getInlineName","getTypeName","def","toLowerCase","startsWith","split","prim","isPrimitive","getPrefixValue","defPrefixes","getNonWsTokens","tokens","tokenUtils","getTokens","l","keys","lineCount","getLineTokens","getDefinedShapes","brackets","defShapes","getShapes","shapeType","getQualifier","i","getStart","updateInlines","inShape","shapeRef","setShape","yasheUtils","DEFAULT_SHAPE","replaceShapes","updatePrefixes","newPrefixes","key","val","EditorComp","useState","textAreaRef","useRef","useContext","ShapesContext","useEffect","options","persistent","lineNumbers","viewportMargin","Infinity","y","YASHE","fromTextArea","current","on","hasErrors","changeThemeStyle","setTimeout","refresh","className","IriComp","props","initialValue","onChange","e","target","PrefixedComp","initialPrefix","setPrefix","getPrefixContex","defined","map","BNodeComp","primitives","PrimitiveComp","Qualifier","scope","valueType","setValueType","newType","setQualifier","ShapeRefComp","inlineValue","setInlineShape","inlineSelector","FactoryTypeComp","TripleTypeComp","deleteTriple","handeCollapse","setType","collapseBtn","setCollapseBtn","onClick","ValueTypeComp","event","CardinalityComp","setCardinality","ValueComponent","colapse","TripleComponent","duration","collapsed","render","toggle","setCollapsibleElement","progress","ShapeTypeComp","colapseBtn","setColapseBtn","ShapeComponent","setTriples","handleChange","getTriplesCount","addTriple","newTriples","style","currentStyle","handleColapse","AssistantComp","PrefixSelector","namespaces","uri","p","ALL_PREFIXES","Wikidata","wikibase","wd","wdt","wdtn","wds","wdref","wdv","ps","psv","psn","pq","pqv","pqn","pr","prv","prn","wdno","wdata","W3C","rdfs","rdf","owl","skos","xsd","prov","schema","geo","geof","Blazegraph","bd","bds","gas","hint","Nav","data-toggle","React","createContext","App","setShapes","setPrefixes","darkStyle","background","color","lightStyle","setStyle","theme","Provider","initialShapes","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ed4d9a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import YASHE from 'yashe';\n\n//Singleton Pattern\nconst Editor = (()=> {\n\n    function EditorClass(){\n\n    \n        this.getYashe = function () {\n            return this.yashe;\n        }\n\n        this.setYashe =  function (yashe) {\n            this.yashe = yashe;\n        }\n\n\n         this.getPrefixes = function () {\n                let yashe = Editor.getInstance().getYashe();\n                let definedPrefixes = yashe.getDefinedPrefixes();\n                let prefixes='';\n                for(let pre in definedPrefixes){\n                    prefixes+='PREFIX '+pre+':    <'+definedPrefixes[pre]+'>\\n';\n                }\n                prefixes+='\\n';\n                return prefixes;\n        }\n\n        this.draw = function(shapes){\n            let newContent = this.getPrefixes();\n            shapes.forEach(element =>{\n                newContent += element.toString()\n            });\n            this.getYashe().setValue(newContent);\n        }\n\n    }\n\n   \n\n    let instance;\n\n    return{\n        getInstance: ()=>{\n            if(!instance){\n                instance = new EditorClass();\n            }\n            return instance;\n        }\n\n    }\n\n})();\n\n\nexport default Editor;","class Type{\n\n    constructor(value){\n        this.value = value;\n    }\n\n    getValue(){\n        return this.value;\n    }\n\n    setValue(value){\n        this.value = value;\n    }\n\n\n}\n\nexport default Type;","class Prefix {\n\n    constructor(prefixName='',prefixValue='http://example.org/'){\n        this.prefixName = prefixName;\n        this.prefixValue = prefixValue;\n    }\n\n\n    getPrefixName(){\n        return this.prefixName;\n    }\n\n    getPrefixValue(){\n        return this.prefixValue;\n    }\n\n}\n\nexport default Prefix;","import Type from '../type';\nimport Prefix from '../../shexUtils/prefix';\n\nclass PrefixedIri extends Type{\n\n    constructor(context,prefix=new Prefix(),value=''){\n        super(value);\n        this.context = context;\n        this.prefix = prefix;\n    }\n\n    getPrefix(){\n        return this.prefix;\n    }\n\n    setPrefix(prefix){\n        this.prefix = prefix;\n    }\n\n\n    getTypeName(){\n        return 'prefixedIri';\n    }\n\n\n    toString(){\n        return this.getPrefix().getPrefixName()+':'+this.getValue();\n    }\n\n}\n\nexport default PrefixedIri;","import Type from '../type';\nimport Editor from'../../../editor';\n\nclass IriRef extends Type{\n\n    constructor(context,value=''){\n        super(value);\n        this.context = context;\n    }\n\n    getTypeName(){\n        return 'iriRef';\n    }\n\n\n    toString(){\n        return '<'+this.getValue()+'>';\n    }\n\n\n}\n\nexport default IriRef;","import Type from '../type';\n\nclass BNode extends Type{\n\n    constructor(context,value='example'){\n        super(value);\n        this.context = context;\n    }\n\n\n    getTypeName(){\n        return 'bnodeType';\n    }\n\n\n    toString(){\n        return '_:'+this.getValue();\n    }\n\n}\n\n\n\nexport default BNode;","import Type from '../type';\n\nconst PRIMITIVES = ['String','Integer','Date','Boolean'];\n\nclass Primitive extends Type{\n\n     constructor(value='string'){\n        super(value);\n    }\n\n    getTypeName(){\n        return 'primitive';\n    }\n\n    toString(){\n        return 'xsd:'+this.getValue();\n    }\n\n\n\n}\n\nexport default Primitive;","import Type from '../type';\n\nclass ShapeReference extends Type{\n\n    constructor(value=''){\n        super(value);\n    }\n\n    getTypeName(){\n        return 'shape';\n    }\n\n    setValue(value){\n        this.value=value;\n    }\n\n    toString(){\n        return this.value;\n    }\n\n\n}\n\n\nexport default ShapeReference;","import Type from '../../type';\n\nclass Literal extends Type{\n\n     constructor(value=''){\n        super(value);\n    }\n\n    getTypeName(){\n        return 'literal';\n    }\n\n    toString(){\n        return 'Literal';\n    }\n\n\n\n}\n\nexport default Literal;","import Type from '../../type';\n\nclass NonLiteral extends Type{\n\n     constructor(value=''){\n        super(value);\n    }\n\n    getTypeName(){\n        return 'nonliteralKind';\n    }\n\n    toString(){\n        return 'NONLITERAL';\n    }\n\n\n\n}\n\nexport default NonLiteral;","import Type from '../../type';\n\nclass IriKind extends Type{\n\n     constructor(value=''){\n        super(value);\n    }\n\n    getTypeName(){\n        return 'iri';\n    }\n\n    toString(){\n        return 'IRI';\n    }\n\n\n\n}\n\nexport default IriKind;","import Type from '../../type';\n\nclass BNodeKind extends Type{\n\n     constructor(value=''){\n        super(value);\n    }\n\n    getTypeName(){\n        return 'bnode';\n    }\n\n    toString(){\n        return 'BNODE';\n    }\n\n\n\n}\n\nexport default BNodeKind;","import PrefixedIri from'./concreteTypes/prefixedIri';\nimport IriRef from'./concreteTypes/iriRef';\nimport BNode from'./concreteTypes/bNode';\nimport Primitive from'./concreteTypes/primitive';\nimport ShapeReference from'./concreteTypes/shapeReference';\n\nimport Literal from'./concreteTypes/kinds/literal';\nimport NonLiteral from'./concreteTypes/kinds/nonLiteral';\nimport IriKind from'./concreteTypes/kinds/iriKind';\nimport BNodeKind from'./concreteTypes/kinds/bNodeKind';\n\nclass TypesFactory{\n\n    createType(type,context){\n\n        let retType;\n        if(type == 'iriRef'){\n            retType = new IriRef(context);\n        }\n        \n        if(type == 'prefixedIri'){\n            retType = new PrefixedIri(context);\n        }\n\n        if(type == 'bnodeType'){\n            retType = new BNode(context);\n        }\n\n        if(type == 'primitive'){\n            retType = new Primitive();\n        }\n\n        if(type == 'shape'){\n            retType = new ShapeReference('');\n        }\n\n        if(type == 'literal'){\n            retType = new Literal(context);\n        }\n\n        if(type == 'nonliteral'){\n            retType = new NonLiteral(context);\n        }\n\n        if(type == 'iri'){\n            retType = new IriKind(context);\n        }\n\n        if(type == 'bnode'){\n            retType = new BNodeKind(context);\n        }\n \n\n        return retType;\n\n    }\n\n\n}\n\nexport default TypesFactory;","import Type from '../../type';\n\nclass BlankKind extends Type{\n\n     constructor(value=''){\n        super(value);\n    }\n\n    getTypeName(){\n        return 'blank';\n    }\n\n    toString(){\n        return '';\n    }\n\n\n\n}\n\nexport default BlankKind;","import TypesFactory from './types/typesFactory';\n\nimport IrirRef from './types/concreteTypes/iriRef';\nimport PrefixedIri from './types/concreteTypes/prefixedIri';\nimport BlankKind from './types/concreteTypes/kinds/blankKind';\n\nclass Shape {\n\n  constructor(id,type=new IrirRef('shapeName'),triples = [],qualifier=new BlankKind()) {\n      this.id = id;\n      this.type = type;\n      this.triples = triples;\n      this.triplesCount = this.triples.length;\n      this.factory = new TypesFactory();\n      this.qualifier = qualifier;\n    }\n\n    addTriple(triple){\n        this.triples.push(triple);\n        this.triplesCount++;\n    }\n\n    removeTriple(tripleId){\n      this.triples = this.triples.filter(function( obj ) {\n        return obj.id != tripleId\n      });\n    }\n\n    getTriplesCount(){\n      return this.triplesCount;\n    }\n\n\n    getId(){\n      return this.id;\n    }\n\n    getType(){\n      return this.type; \n    }\n\n\n    getTriples() {\n        return this.triples;\n     }\n\n    setTriples(triples){\n      this.triples = triples;\n    }\n\n    getQualifier() {\n        return this.qualifier;\n     }\n\n    setQualifier(qualifier){\n      this.qualifier = this.factory.createType(qualifier,'shapeName');\n    }\n    \n\n    setType(type){\n        this.type = this.factory.createType(type,'shapeName');\n     }\n\n\n     toString(){\n    \n      let str = this.type+' '+this.qualifier+' {\\n'\n      this.triples.forEach(triple => {\n        str+=triple;\n      });\n\n      str+=\"}\\n\\n\"\n      return str\n\n     }\n\n\n  }\n\nexport default Shape;","import Codemirror from 'codemirror';\nimport Editor from '../entities/editor';\nimport Shape from '../entities/shexEntities/shape';\n\nlet shapesCount = 0;\n\nfunction addShape (shapes){\n\n    const id = shapes.length + shapesCount++;\n    const newShape = new Shape(id);\n    \n    let newShapes = [];\n    newShapes = Object.assign(newShapes, shapes);\n    newShapes.push(newShape)\n    emit(newShapes);\n    return newShape;\n}\n\nfunction deleteShape(shapes,shapeId,confirm) {\n    if(!confirm){\n        confirm = window.confirm('Are you sure?');\n    }\n    if (confirm == true) {\n        const newShapes = shapes.filter(shape => shape.id != shapeId);\n        emit(newShapes);\n        return newShapes;\n    }\n    return shapes;\n}\n\nfunction getShapeById(shapes,shapeId) {\n    return shapes.filter(function( obj ) {\n        return obj.id == shapeId\n    })[0];\n}\n\nfunction getShapeByName(shapes,name) {\n    for(let s in shapes){\n        if(shapes[s].getType().getValue() == name){\n            return shapes[s];\n        }\n    }\n}\n\n\nfunction getTripleById(shape,tripleId) {\n    return shape.getTriples().filter(function( obj ) {\n        return obj.id == tripleId\n    })[0];\n}\n\n\nfunction emit(newShapes) {\n    const yashe = Editor.getInstance().getYashe();\n    if(yashe!=undefined){\n        Codemirror.signal(yashe,'humanEvent',newShapes);\n    }\n}\n\n\nconst shexUtils = {\n    addShape:addShape,\n    deleteShape:deleteShape,\n    getShapeById:getShapeById,\n    getShapeByName:getShapeByName,\n    getTripleById:getTripleById,\n    emit:emit\n}\n\nexport default shexUtils;","import shexUtils from './shexUtils';\n\nimport Editor from '../entities/editor';\n\nimport  Shape from '../entities/shexEntities/shape';\nimport  Triple from '../entities/shexEntities/triple';\n\nimport TypesFactory from '../entities/shexEntities/types/typesFactory';\n\nimport PrefixedIri from '../entities/shexEntities/types/concreteTypes/prefixedIri';\nimport IriRef from '../entities/shexEntities/types/concreteTypes/iriRef';\nimport BNode from '../entities/shexEntities/types/concreteTypes/bNode';\nimport Primitive from '../entities/shexEntities/types/concreteTypes/primitive';\nimport ShapeReference from '../entities/shexEntities/types/concreteTypes/shapeReference';\n\nimport Literal from '../entities/shexEntities/types/concreteTypes/kinds/literal';\nimport NonLiteral from '../entities/shexEntities/types/concreteTypes/kinds/nonLiteral';\nimport IriKind from '../entities/shexEntities/types/concreteTypes/kinds/iriKind';\nimport BNodeKind from '../entities/shexEntities/types/concreteTypes/kinds/bNodeKind';\nimport BlankKind from '../entities/shexEntities/types/concreteTypes/kinds/blankKind';\n\n\n\nimport Prefix from '../entities/shexEntities/shexUtils/prefix';\n\nimport InlineShape from '../entities/shexEntities/shexUtils/inlineShape';\n\n\n//HAY QUE METER TODOS\nconst PRIMITIVES = ['string','integer','date','boolean'];\nconst CARDINALITY = ['*','?','+'];\n\n\nlet inlines;\n\nfunction getTokens(){\n    let yashe = Editor.getInstance().getYashe();\n    let tokens =[];\n    if(yashe!=undefined){\n        let numPrefixes = Object.keys(yashe.getDefinedPrefixes()).length;\n        for (var l = numPrefixes+1; l < yashe.lineCount(); ++l) {\n            let lineTokens = getNonWsTokens(yashe.getLineTokens(l));\n            lineTokens.forEach(token =>{\n                tokens.push(token);\n            })\n\n        }\n    }\n    return tokens;\n}\n\nfunction getDefinedShapes(tokens){\n    let brackets=0\n    let shape=[];\n    let defShapes = [];\n    //Separate shapes in arrays\n    tokens.forEach(element =>{\n        shape.push(element);\n        if(element.string == '{'){\n            brackets++;\n        }\n\n        if(element.string == '}'){\n            brackets--;\n            //Is the last } ?\n            if(brackets==0){\n                defShapes.push(shape);\n                shape = [];\n            }\n        }\n\n    })\n    return defShapes;\n}\n\n\nfunction getShapes(defShapes){\n    inlines = [];\n    let shapes = [];\n    let yashe = Editor.getInstance().getYashe();\n\n    defShapes.forEach(shape => {\n        let id = shapes.length;\n        let shapeDef = shape[0].string;\n        let shapeType = getType(shapeDef,'shapeName');\n        let qualifier = getQualifier(shape);\n        let triples = getTriples(id,shape);\n\n        shapes.push(new Shape(id,shapeType,triples,qualifier));\n    })\n    return shapes;\n\n}\n\nfunction getQualifier(shape) {\n    if(shape[1].type == 'keyword'){\n        let type = shape[1].string.toLowerCase();\n        return new TypesFactory().createType(type);\n    }\n    return new BlankKind();\n}\n\nfunction getTriples(shapeId,shape) {\n        let triples = [];\n        let singleTriple = [];\n        let yashe = Editor.getInstance().getYashe();\n        let start = getStart(shape);\n        for(let i=start;i<shape.length;i++){\n            singleTriple.push(shape[i])\n            if(shape[i].type == 'punc'){// finish of the triple ';'\n                if(singleTriple.length!=1){ //This line is neccesary when last triple of the shape ends with ';'\n           \n                    triples.push(getTriple(triples,singleTriple,shapeId));\n                    singleTriple = [];\n                }\n            }\n\n        }\n    return triples;\n}\n\nfunction getTriple(triples,singleTriple,shapeId) {\n    let id = triples.length;\n    let type;\n    let value;\n    let cardinality;\n    let inlineShape = new InlineShape();\n    let inlineName;\n    let index = 0;\n    for(let s in singleTriple){\n        let token = singleTriple[s];\n        \n        if(index == 0){\n            type = getType(token.string,'tripleName');\n            \n        }else{\n   \n            if(token.type == 'string-2' || token.type == 'keyword' || token.type == 'variable-3'){\n                value = getValue(token.string);\n            }\n    \n            if(token.type == 'at' ){\n                \n                inlineName = getInlineName(token.string);\n                inlines.push(\n                        {\n                            shapeId:shapeId,\n                            tripleId:id,\n                            inlineName:inlineName\n                        }\n                    );\n            }\n\n            if(token.type == 'card' ){\n                cardinality = token.string;\n            }\n\n        }\n        index++;\n    }\n\n\n    //ShapeRef\n    if(inlineName != undefined){\n        let ref;\n        if(value!= undefined){\n           ref = value.getTypeName();\n        }\n        value = new ShapeReference(ref); \n    }\n\n    return new Triple(id,type,value,inlineShape,cardinality);\n}\n\nfunction getStart(shape){\n    for(let i=0;i<shape.length;i++){\n        if(shape[i].string=='{'){\n            return i+1;\n        }\n    }\n}\n\n\n\nfunction getValue(def) {\n\n    let factory = new TypesFactory();\n    let type = factory.createType(def.toLowerCase());\n\n    if(type!=undefined){\n        return type;\n    }\n\n\n    if(def.startsWith('<')){\n        let value = def.split('<')[1].split('>')[0];\n        return new IriRef('valueName',value);\n    }\n\n    let token = def.split(':');\n    let yashe = Editor.getInstance().getYashe();\n\n    if(token.length==2){\n        //At this point it can be Prefixed,Primitive or ShapeRef\n        if(isPrimitive(token[1])){\n            return new Primitive(token[1]);\n        }else{\n            let prefixName = token[0];\n            let prefixValue = getPrefixValue(yashe.getDefinedPrefixes(),prefixName)\n            let prefix = new Prefix(prefixName,prefixValue);\n            return  new PrefixedIri('valueName',prefix,token[1]);\n        }\n\n    }\n \n}\n\nfunction getType(def,context) {\n    let value;\n    let yashe = Editor.getInstance().getYashe();\n    if(def.startsWith('<')){\n        value = def.split('<')[1].split('>')[0];\n        return new IriRef(context,value);\n    }else if(def.startsWith('_:')){\n        value = def.split(':')[1];\n        return new BNode(context,value);\n    }else{\n        value = def.split(':')[1];\n        let prefixName = def.split(':')[0];\n        let prefixValue = getPrefixValue(yashe.getDefinedPrefixes(),prefixName)\n        let prefix = new Prefix(prefixName,prefixValue);\n        return new PrefixedIri(context,prefix,value);\n    }\n}\n\n\nfunction updateInlines(shapes) {\n\n    for(let inShape in inlines){\n  \n        let shapeId = inlines[inShape].shapeId;\n        let tripleId = inlines[inShape].tripleId;\n        let name = inlines[inShape].inlineName;\n\n        let shape = shexUtils.getShapeById(shapes,shapeId);\n        let triple = shexUtils.getTripleById(shape,tripleId);\n\n        let shapeRef = shexUtils.getShapeByName(shapes,name);\n        triple.getInlineShape().setShape(shapeRef);\n\n    }\n}\n\n\n\nfunction getPrefixValue(defPrefixes,prefixName){\n    let prefixValue;\n    for(let pre in defPrefixes){\n        if(pre==prefixName){\n            prefixValue = defPrefixes[pre]\n        }\n    }\n    return prefixValue;\n}\n\n\nfunction isPrimitive(value) {\n    for(let prim in PRIMITIVES){\n        if(PRIMITIVES[prim] == value){\n            return true;\n        }\n    }\n    return false;\n}\n\n\nfunction getInlineName(token) {\n    if(token.startsWith('@<')){\n        return token.split('<')[1].split('>')[0];\n    }\n    return token.split(':')[1];\n}\n\n\nfunction getNonWsTokens(tokens){\n    return tokens.filter(function(obj){\n        return obj.type != 'ws';\n    })\n}\n\nconst tokenUtils = {\n    getTokens:getTokens,\n    getDefinedShapes:getDefinedShapes,\n    getShapes:getShapes,\n    updateInlines:updateInlines\n}\n\nexport default tokenUtils;","import Shape from'../shape';\n\nclass InlineShape{\n\n    constructor(shape=null){\n        this.shape = shape;\n    }\n\n\n    getShape(){\n        return this.shape;\n    }\n\n    setShape(shape){\n        this.shape = shape;\n    }\n\n\n    toString(){\n        if(this.shape){\n           let shapeRef = this.shape.getType().toString();\n            return '@'+shapeRef;\n        }\n\n        return '';\n    }\n\n\n}\n\nexport default InlineShape;","import TypesFactory from './types/typesFactory';\n\nimport PrefixedIri from './types/concreteTypes/prefixedIri';\nimport Primitive from './types/concreteTypes/primitive';\n\nimport InlineShape from './shexUtils/inlineShape';\n\nclass Triple {\n\n\n    constructor(id,type=new PrefixedIri('tripleName'),value=new Primitive(),inlineShape=new InlineShape(),cardinality='') {\n        this.id = id;\n        this.type = type;\n        this.value = value;\n        this.cardinality = cardinality;\n        this.inlineShape = inlineShape;\n        this.factory = new TypesFactory();\n      }\n      \n    addValue(value){\n        this.values.push(value);\n        this.valuesCount++;\n    }\n\n    getId(){\n        return this.id;\n    }\n\n    getType(){\n      return this.type; \n    }\n\n    setType(type){\n       this.type = this.factory.createType(type,'tripleName');\n     }\n\n    setValue(value){\n        this.value = this.factory.createType(value,'valueName');;\n    }\n\n    setCardinality(cardinality){\n        this.cardinality = cardinality;\n    }\n\n    getInlineShape(){\n        return this.inlineShape;\n    }\n\n    setInlineShape(inlineShape){\n        this.inlineShape = inlineShape;\n    }\n\n\n    getValue(){\n       return this.value;\n    }\n\n\n    getCardinality(){\n        return this.cardinality;\n    }\n\n\n\n    toString(){\n        return '  '+this.getType().toString()+'          '+\n        this.getValue().toString() +' '+\n        this.getInlineShape().toString()+\n        this.getCardinality()+'  ;\\n';\n\n    }\n\n\n}\n\nexport default Triple;","import Editor from '../entities/editor';\nimport tokenUtils from './tokenUtils';\n\n\nconst DEFAULT_SHAPE = 'PREFIX :       <http://example.org/>\\n'+\n'PREFIX schema: <http://schema.org/>\\n'+\n'PREFIX xsd:    <http://www.w3.org/2001/XMLSchema#>\\n\\n'+\n\n':User IRI {\\n'+ \n'  schema:name          xsd:string  ;\\n'+\n'  schema:birthDate     xsd:date?  ;\\n'+\n'  schema:birthPlace    xsd:string+  ;\\n'+\n'  schema:knows          @:User*  \\n'+\n'}';\n  \n  \n  function replaceShapes(){\n    let tokens = tokenUtils.getTokens();\n    let defShapes = tokenUtils.getDefinedShapes(tokens);\n    let newShapes = tokenUtils.getShapes(defShapes);\n    \n    tokenUtils.updateInlines(newShapes);\n\n    return newShapes;\n  }\n\n  function updatePrefixes(){\n    let newPrefixes = [];\n    let prefix = {};\n    let yashe = Editor.getInstance().getYashe();\n    if(yashe!=undefined){\n      let keys = Object.keys(yashe.getDefinedPrefixes());\n      let values = Object.values(yashe.getDefinedPrefixes());\n\n      for(let i=0;i<keys.length;i++){\n          prefix = {};\n          prefix.key=keys[i];\n          prefix.val=values[i];\n          newPrefixes.push(prefix);\n      }\n    }\n    return newPrefixes;\n  }\n\n const yasheUtils = {\n      DEFAULT_SHAPE:DEFAULT_SHAPE,\n      replaceShapes:replaceShapes,\n      updatePrefixes:updatePrefixes\n\n  }\n\n  export default yasheUtils;\n","import React, {useState,useContext,useEffect,useRef} from 'react';\nimport 'yashe/dist/yashe.min.css';\nimport {ShapesContext} from '../App';\n\nimport YASHE from 'yashe';\nimport Editor from '../entities/editor';\n\nimport yasheUtils from '../utils/yasheUtils';\n\nfunction EditorComp() {\n\n  const [yashe,setYashe] = useState(null);\n  const textAreaRef = useRef(null);\n  const context = useContext(ShapesContext);\n\n  useEffect(() => {\n    \n        if (!yashe) {\n            const options = {\n                persistent:false,\n                lineNumbers: true,\n                viewportMargin: Infinity\n            }\n            \n            const y = YASHE.fromTextArea(\n                textAreaRef.current, \n                options)\n\n             y.on('blur', function() {\n                if(!y.hasErrors(y)){\n                    replaceShapes();\n                    updatePrefixes();\n                }\n            });\n\n\n             \n            y.on('humanEvent', function(shapes) {\n                Editor.getInstance().draw(shapes);\n            });\n\n\n            y.on('prefixUpdate', function() {\n                updatePrefixes();\n            });\n\n            y.on('themeChange', function() {\n                changeThemeStyle();\n            });\n\n            y.on('delete', function() {\n                replaceShapes();\n                updatePrefixes();\n\n            });\n\n            y.on('upload', function() {\n                //TimeOut necesary\n                setTimeout(function(){\n                  replaceShapes();\n                  updatePrefixes();\n                }, 10);\n                \n            });\n\n            y.on('keydown', function() {\n                if(!y.hasErrors()){\n                    replaceShapes();\n                    updatePrefixes();\n                }\n            });\n\n            //Fired after a key is handled through a key map\n            //(for example \"Ctrl-Z\")\n            y.on('keyHandled', function() {\n                if(!y.hasErrors()){\n                    replaceShapes();\n                    updatePrefixes();\n                }\n            });\n\n            y.setValue(yasheUtils.DEFAULT_SHAPE)\n            y.refresh();\n            setYashe(y);\n            \n            Editor.getInstance().setYashe(y);\n\n            replaceShapes();\n            updatePrefixes();\n        }\n    }, [yashe]\n    );\n\n    const replaceShapes = ()=>{\n        context.replaceShapes(yasheUtils.replaceShapes());\n    }\n\n    const updatePrefixes = ()=>{\n        context.updatePrefixes(yasheUtils.updatePrefixes());\n    }\n\n     const changeThemeStyle = ()=>{\n         context.changeThemeStyle();\n    }\n\n\n\n    return  (<div className='col show'>\n                <textarea ref={textAreaRef}/>\n            </div>            \n    );\n\n}\n\n\n\nexport default EditorComp;\n\n","import React,{useState,useContext} from 'react';\nimport {ShapesContext} from '../../../../App';\n\nfunction IriComp (props) {\n\n    const context = useContext(ShapesContext);\n    const {shape,triple,type} = props;\n\n    let initialValue=shape.type.value;\n    if(type =='triple'){\n      initialValue = triple.type.value;\n    }else if(type =='value'){\n      initialValue = triple.value.value;\n    }\n\n    const [value,setValue] = useState(initialValue);\n\n     \n    const handleChange = (e) =>{\n      \n      const value = e.target.value;\n      if(type == 'shape'){\n        shape.type.setValue(value);\n      }else if(type == 'triple'){\n        triple.type.setValue(value);\n      }else{\n        triple.value.setValue(value);            \n      }\n      context.emit();\n      setValue(value);\n\n\n    \n    }\n    \n\n    return (<input className={shape.type.context+' form-control col-4'} \n                      context=\"text\" \n                      value={value}\n                      onChange={handleChange}/>);\n    \n                                   \n    \n\n}\n\nexport default IriComp;\n\n","import React,{useState,useContext,useEffect} from 'react';\nimport {ShapesContext} from '../../../../App';\nimport {getPrefix} from '../../../../utils/prefixUtils';\n\nfunction PrefixedComp (props) {\n\n    const context = useContext(ShapesContext);\n \n    const {shape,triple,type} = props;\n\n    let initialValue = shape.type.value;\n    //We can't initializae initialPrefix \n    //beacause if it is called by a triple \n    //we don't know its shape's type\n    let initialPrefix; \n    if(type=='shape'){\n      initialPrefix = shape.type.prefix.prefixValue;\n    }else if(type =='triple'){\n      initialValue = triple.type.value;\n      initialPrefix = triple.type.prefix.prefixValue;\n    }else{ \n      initialValue = triple.value.value;\n      initialPrefix = triple.value.prefix.prefixValue;\n    }\n\n    const [value,setValue] = useState(initialValue);\n    const [prefix,setPrefix] = useState(initialPrefix);\n\n\n  /**\n    Esto igual se puede quitar\n   */\n   const getPrefixContex = ()=>{\n        let prefix = 'prefixShape';\n        let context = shape.type.context;\n        if( context == 'tripleName'){\n            prefix = 'prefixTriple';\n        }\n        if( context == 'valueName'){\n            prefix = 'prefixValue';\n        }\n        return prefix;\n    }\n\n    const handleTypeChange = (e) =>{\n        const value = e.target.value;\n        if(type == 'shape'){\n          shape.type.setValue(value);\n        }else if(type == 'triple'){\n          triple.type.setValue(value);\n        }else{\n          triple.value.setValue(value);            \n        }\n        context.emit();\n        setValue(value);\n    }\n\n    const handlePrefixChange = (e) =>{\n      let prefix = getPrefix(e.target.value);\n\n      if(type == 'shape'){\n        shape.type.setPrefix(prefix);\n      }else if(type == 'triple'){\n        triple.type.setPrefix(prefix);  \n      }else{\n        triple.value.setPrefix(prefix);  \n      }\n\n      context.emit();\n      setPrefix(e.target.value);\n    }\n\n    return  (<div className='row col-6'>\n                <select className={getPrefixContex()+' col-5 form-control'}\n                        value={prefix}\n                        onChange={handlePrefixChange}>\n                 \n                  { \n                    context.prefixes.map((pre) =>{\n                      return <option key={pre.key} value={pre.val}>{pre.key}</option>\n                    })\n                  }\n                </select>\n                   \n                <input  className={shape.type.value+' form-control col'} \n                        context=\"text\" \n                        value={value}\n                        onChange={handleTypeChange} />\n               \n              </div>);\n              \n                               \n    \n\n}\n\n\n    \n\nexport default PrefixedComp;\n\n","import Editor from '../entities/editor';\nimport Prefix from '../entities/shexEntities/shexUtils/prefix.js';\n\nexport function getPrefix(prefix){\n      let defined = Editor.getInstance().getYashe().getDefinedPrefixes();\n      for(let def in defined){\n          if(defined[def] == prefix){\n            return new Prefix(def,defined[def]);\n          }\n      }\n      return new Prefix();\n}\n\n","import React,{useState,useContext} from 'react';\nimport {ShapesContext} from '../../../../App';\n\nfunction BNodeComp(props) {\n\n    const context = useContext(ShapesContext);\n    const {shape} = props;\n\n    let initialValue=shape.type.value;     \n    if(initialValue == ''){\n        initialValue = 'example';\n        shape.type.setValue(value);\n    }\n\n    const [value,setValue] = useState(initialValue);\n        \n\n    const change = (e) =>{\n          const value = e.target.value;\n          shape.type.setValue(value);\n          context.emit();\n          setValue(value)\n    }\n   \n\n    return (<input   className={shape.type.context+' form-control col-4'} \n                        context=\"text\" \n                        value={value}\n                        onChange={change}/>);\n\n                                      \n    \n\n}\n\nexport default BNodeComp;\n\n","import React,{useState,useContext} from 'react';\nimport {ShapesContext} from '../../../../App';\n\nconst primitives = ['String','Integer','Date','Boolean'];\n\nfunction PrimitiveComp (props) {\n\n    const context = useContext(ShapesContext);\n    const {shape,triple} = props;\n\n    const [value,setValue] = useState(triple.value.value);\n\n    const handleChange = (e) =>{\n          const value = e.target.value;\n          triple.value.setValue(value);\n          context.emit();\n          setValue(value);\n    }\n    \n\n    return (<select className=\"col-sm-4 form-control tripleValue\"\n                    value={value}\n                    onChange={handleChange}>\n            {\n                primitives.map(prim =>{\n                    return <option key={prim} value={prim.toLowerCase()}>{prim}</option>\n                })\n            }\n            </select>);\n    \n}\n\nexport default PrimitiveComp;\n\n","import React,{useState,useContext} from 'react';\nimport {ShapesContext} from '../../../App';\n\nimport shexUtils from '../../../utils/shexUtils';\n\n\nfunction Qualifier (props) {\n\n    const context = useContext(ShapesContext);\n    const {shape,triple,value,scope} = props;\n\n    let initialValue;\n    if(scope=='shape'){\n        initialValue = shape.qualifier.getTypeName();\n    }else{\n         initialValue = triple.value.value;\n    }\n\n\n    const [valueType,setValueType] = useState(initialValue)\n\n    const handleTypeChange = (e) =>{\n        let newType = e.target.value;\n        if(scope=='shape'){\n            shape.setQualifier(newType);\n        }else{\n            triple.value.value =newType;\n        }\n\n        context.emit();\n        setValueType(newType);\n    }\n\n\n    return (<select className=\"col form-control valueInlineShape\"\n                        value={valueType}\n                        onChange={handleTypeChange}>\n                    <option value='shape'></option>\n                    <option value='iri'>IRI</option>\n                    <option value=\"literal\">Literal</option>\n                    <option value=\"nonliteral\">NonLiteral</option>\n                    <option value=\"bnode\">BNODE</option>\n                </select>\n\n    );\n    \n}\n\nexport default Qualifier;\n\n","import React,{useState,useContext} from 'react';\nimport {ShapesContext} from '../../../../App';\nimport Qualifier from '../../qualifier/Qualifier';\n\nimport shexUtils from '../../../../utils/shexUtils';\n\nfunction ShapeRefComp (props) {\n\n    const context = useContext(ShapesContext);\n    const {shape,triple} = props;\n\n    let inlineValue = '';\n    if(triple.inlineShape.shape != null){\n        inlineValue = triple.inlineShape.shape.id;\n    }\n    \n    const [inlineShape,setInlineShape] = useState(inlineValue);\n    const [valueType,setValueType] = useState(triple.value.getTypeName())\n\n\n    const handleInlineChange = (e) =>{\n        const shapeId = e.target.value;\n        let inlineShape = null;\n        let inlineSelector = '';\n        if(shapeId!=''){\n            inlineShape = shexUtils.getShapeById(context.shapes,shapeId);\n            inlineSelector = inlineShape.id;\n        }\n        triple.getInlineShape().setShape(inlineShape);\n        context.emit();\n        setInlineShape(inlineSelector);\n    }\n\n    const handleTypeChange = (e) =>{\n        let newType = e.target.value;\n        triple.setValue(newType);\n        context.emit();\n        setValueType(newType);\n    }\n\n\n    return (<div className='row col'>\n                <select className=\"col form-control valueInlineShape\"\n                        value={inlineShape}\n                        onChange={handleInlineChange}>\n                    <option value=''></option>\n                    { \n                    context.shapes.map(shape =>{\n                      return <option key={shape.id} value={shape.id}>{'@'+shape.type}</option>\n                    })\n                  }\n                </select>\n\n                <Qualifier triple={triple} scope='triple'/>\n            </div>\n\n    \n    \n    \n    );\n    \n}\n\nexport default ShapeRefComp;\n\n","import React from 'react';\n\nimport IriComp from './concrete/IriComp';\nimport PrefixedComp from './concrete/PrefixedComp';\nimport BNodeComp from './concrete/BNodeComp';\nimport PrimitiveComp from './concrete/PrimitiveComp';\nimport ShapeRefComp from './concrete/ShapeRefComp';\n\nfunction FactoryTypeComp (props) {\n\n    const {shape,triple,type,instance} = props;\n\n    if(instance == 'iriRef'){\n        \n        return <IriComp shape={shape} triple={triple} type={type}/>\n\n    }\n    else if(instance == 'prefixedIri'){\n\n        return <PrefixedComp shape={shape} triple={triple} type={type}/>\n\n    }\n    else if(instance == 'bnodeType'){\n\n        return <BNodeComp shape={shape}/>\n\n    }\n    else if(instance == 'primitive'){\n        \n        return  <PrimitiveComp shape={shape} triple={triple}/>\n\n    }else if(instance == 'shape'){\n        \n        return  <ShapeRefComp shape={shape}triple={triple}/>\n\n    }else{\n        return null;\n    }\n                                   \n}\n\nexport default FactoryTypeComp;\n\n","import React,{useContext,useState} from 'react';\nimport FactoryTypeComp from './FactoryTypeComp';\n\nimport {ShapesContext} from '../../../App';\n\nfunction TripleTypeComp (props){\n\n        const context = useContext(ShapesContext);\n\n        const {shape,triple,deleteTriple,handeCollapse} = props;\n\n        const [type,setType] = useState(triple.type.getTypeName());\n        const [collapseBtn,setCollapseBtn] = useState('expand_more');\n\n        const handleChange = (e)=>{\n                const type = e.target.value;\n                triple.setType(type)\n                context.emit();\n                setType(type)\n        }\n\n        const handleCollapseBtn = (e)=>{\n                if(collapseBtn=='expand_more'){\n                    setCollapseBtn('expand_less');\n                }else{\n                    setCollapseBtn('expand_more');\n                }\n\n                handeCollapse();\n\n        }\n\n\n        return (<div className=\"row col triples-header\">\n                        <label className=\"col-xs-1 tripleLabel\">Triple</label>                        \n                        <select className=\"col-2 form-control tripleType\" \n                                value={type} \n                                onChange={handleChange}>\n\n                                <option value=\"iriRef\">IriRef</option>\n                                <option value=\"prefixedIri\">Prefixed</option>\n                                \n                        </select>\n\n                        <FactoryTypeComp shape={shape} \n                                        triple={triple}\n                                        type='triple'\n                                        instance={triple.type.getTypeName()}/>\n                          \n                        <button className=\"col-xs-1  colapseButton mdc-icon-button material-icons btn-primary\"\n                                onClick={handleCollapseBtn}>\n                                {collapseBtn}\n                        </button>\n\n                        <button className=\"col-xs-1 deletePropButton mdc-icon-button material-icons btn-danger\"\n                                onClick={() => deleteTriple(triple.id)}>\n                                delete\n                        </button>\n\n                       \n\n                         \n                </div>);\n\n}\n\nexport default TripleTypeComp;\n\n","import React,{useContext,useState} from 'react';\nimport FactoryTypeComp from './FactoryTypeComp';\n\nimport {ShapesContext} from '../../../App';\n\nfunction ValueTypeComp(props) {\n    \n    const {shape,triple} = props;\n\n    const context = useContext(ShapesContext);\n    const [valueType,setValueType] = useState(triple.value.getTypeName())\n    \n    const handleChange = (event) =>{\n        let newType = event.target.value;\n        if(newType!='shape'){\n            //This is necesary when we change from ShapeType to otherType\n            triple.inlineShape.shape = null;\n        }\n        triple.setValue(newType);\n        context.emit();\n        setValueType(newType);\n    }\n\n    return  (<div className=\"row col-10\">\n                    <select className=\"col-5 form-control valueType\"\n                                    value={valueType} \n                                    onChange={handleChange}>\n\n                                    <option value=\"primitive\">Primitive</option>\n                                    <option value=\"shape\">Shape</option>\n                                    <option value=\"iriRef\">IriRef</option>\n                                    <option value=\"prefixedIri\">Prefixed</option>\n                                    <option value=\"literal\">Literal</option>\n                                    <option value=\"nonliteral\">NonLiteral</option>\n                                    <option value=\"iri\">IRI</option>\n                                    <option value=\"bnode\">BNODE</option>\n                                </select>\n\n\n                                <FactoryTypeComp shape={shape} \n                                    triple={triple}\n                                    type='value'\n                                    instance={triple.value.getTypeName()}/>\n\n                    </div>);\n\n}\n\nexport default ValueTypeComp;\n\n","import React,{useState,useContext} from 'react';\nimport {ShapesContext} from '../../../App';\n\nfunction CardinalityComp (props) {\n\n    const {shape,triple} = props;\n    \n    const context = useContext(ShapesContext);\n    const [cardinality,setCardinality] = useState(triple.cardinality.toString());\n    \n\n    const handleChange = (event) => {\n   \n        let cardinality = event.target.value;\n        triple.setCardinality(cardinality);\n        context.emit();\n        setCardinality(cardinality)\n       \n    }\n\n\n    return(<div className='row col-4'>    \n                <select className=\"col  form-control tripleCardinality\"\n                    value={cardinality}\n                    onChange={handleChange}>\n\n                            <option value=\"\">Exactly one</option>\n                            <option value=\"*\">Zero or more</option>\n                            <option value=\"+\">One at least</option>\n                            <option value=\"?\">One or none</option>\n                </select>\n                \n            </div>);\n\n  \n\n}\n\nexport default CardinalityComp;\n\n","import React,{useContext} from 'react';\n\nimport {ShapesContext} from '../../App';\n\nimport ValueTypeComp from './types/ValueTypeComp';\nimport CardinalityComp from './cardinality/CardinalityComp';\n\nfunction ValueComponent (props) {\n\n    const context = useContext(ShapesContext);\n    const {shape,triple,colapse} = props;\n\n\n           \n    return (<div ref={colapse} className=\"col-12 valuesCol\"  >\n                    <div className=\"row values-container\">\n                        <div className=\"col-10 triplesVal \">\n                            <div className=\"row\">\n                                <label className=\"col-3 valueLabel\">Value</label>\n                                <ValueTypeComp shape={shape} triple={triple}/>\n                                \n                                <label className=\"col-3 cardiLabel\">Cardinality</label>\n                                <CardinalityComp shape={shape} triple={triple}/>\n                            </div>\n                       </div>\n                    </div>\n                </div>);\n                                   \n\n\n}\n\nexport default ValueComponent;\n\n","import React,{useContext} from 'react';\nimport SlideToggle from \"react-slide-toggle\";\n\nimport TripleTypeComp from './types/TripleTypeComp';\n\nimport ValueComponent from './ValueComponent';\n\nfunction TripleComponent (props) {\n\n    const {shape,triple,deleteTriple} = props;\n\n    return ( <SlideToggle duration={180}\n                          collapsed\n                          render={({ toggle, setCollapsibleElement, progress }) => (\n                <div className=\"row tripleRow\">\n\n                    <TripleTypeComp \n                        shape={shape} \n                        triple={triple} \n                        deleteTriple={deleteTriple}\n                        handeCollapse={toggle}/>\n\n                <ValueComponent  \n                        shape={shape} \n                        triple={triple} \n                        colapse={setCollapsibleElement}/>\n                       \n                </div>\n            )}/>);\n                                   \n}\n\nexport default TripleComponent;\n\n","import React,{useContext,useState} from 'react';\nimport FactoryTypeComp from './FactoryTypeComp';\n\nimport {ShapesContext} from '../../../App';\n\nfunction ShapeTypeComp (props) {\n\n        const context = useContext(ShapesContext);\n        const {shape,colapse} = props;\n\n        const [type,setType] = useState(shape.type.getTypeName());\n        const [colapseBtn,setColapseBtn] = useState('expand_more');\n   \n        const handleChange = (e)=>{\n                const type = e.target.value;\n                shape.setType(type)\n                context.emit();\n                setType(type)\n        }\n\n        const handleColapse = (e)=>{\n                if(colapseBtn=='expand_more'){\n                    setColapseBtn('expand_less');\n                }else{\n                    setColapseBtn('expand_more');\n                }\n                colapse();\n        }\n\n\n        return (<div className=\"row col-8\">\n                        <select className=\"col-3 form-control shapeType\" \n                            value={type} \n                            onChange={handleChange}>\n\n                            <option value=\"iriRef\">IriRef</option>\n                            <option value=\"prefixedIri\">Prefixed</option>\n                            <option value=\"bnodeType\">BNode</option>\n                        </select>\n\n                        <FactoryTypeComp shape={shape} \n                                    triple={null}\n                                    type='shape'\n                                    instance={shape.type.getTypeName()}/>\n\n                        <button className=\"col-xs-1  colapseButton mdc-icon-button material-icons btn-primary\"\n                                onClick={handleColapse}>\n                                {colapseBtn}\n                        </button>\n\n\n                        <button className=\"col-xs-1 deleteShapeButton mdc-icon-button material-icons btn-danger\" \n                            onClick={()=>context.deleteShape(shape.id)}>\n                            delete\n                        </button>\n                \n                </div>);\n\n                                   \n\n}\n\nexport default ShapeTypeComp;\n\n","import React,{useContext,useState} from 'react';\nimport SlideToggle from \"react-slide-toggle\";\n\nimport {ShapesContext} from '../../App';\n\nimport TripleComponent from './TripleComponent';\nimport ShapeTypeComp from './types/ShapeTypeComp';\nimport Qualifier from './qualifier/Qualifier';\n\nimport Triple from '../../entities/shexEntities/triple';\n\nfunction ShapeComponent (props) {\n\n    const context = useContext(ShapesContext);\n    const {shape} = props;\n\n    const [triples,setTriples] = useState(shape.triples);\n     const [colapseBtn,setColapseBtn] = useState('expand_less');\n\n    const handleChange = ()=>{\n        const id = shape.getTriplesCount();\n        const triple = new Triple(id);\n        \n        setTriples([...triples,triple]);\n\n        shape.addTriple(triple);\n        context.emit();\n        \n    }\n\n    const handleColapse = (toggle)=>{\n            if(colapseBtn=='expand_more'){\n                setColapseBtn('expand_less');\n            }else{\n                setColapseBtn('expand_more');\n            }\n            toggle();\n    }\n\n    const deleteTriple = (tripleId)=>{\n        const newTriples = shape.triples.filter( triple => triple.id != tripleId);\n        setTriples(newTriples);\n        shape.setTriples(newTriples);\n        context.emit();\n    }\n\n\n    return (\n        <div className=\"shapes-container\" style={context.currentStyle}>\n            <SlideToggle duration={180}\n                         collapsed\n                         render={({ toggle, setCollapsibleElement, progress }) => (\n                <div>              \n                    <div className=\"row shapes-header\" style={context.currentStyle}>\n                        <label className=\"col-sm-2\">Shape </label>\n                        <ShapeTypeComp shape={shape} colapse={toggle}/>\n                    \n                    </div>\n            \n                    <div className=\"row qualifier\" ref={setCollapsibleElement} style={context.currentStyle}>\n                       \n                            <label className=\"col-2 qualiLabel\">Qualifier </label>\n                            <div className=\"col-2\">\n                                <Qualifier shape={shape} scope='shape'/>\n                            </div>\n\n                    </div>\n\n                </div>\n\n            )}/>\n\n            <SlideToggle duration={180}                         \n                         render={({ toggle, setCollapsibleElement, progress }) => (\n                <div>              \n                     <button className=\"col-xs-1  colapseTriplesBtn mdc-icon-button material-icons btn-primary\"\n                                onClick={()=>handleColapse(toggle)}>\n                                {colapseBtn}\n                        </button>\n                    <div ref={setCollapsibleElement}>\n                        <div className=\"triples-container col-xs \"style={context.currentStyle}>\n                            {triples.map(triple =>\n\n                                <TripleComponent key={triple.id}\n                                                shape={shape} \n                                                triple={triple}\n                                                deleteTriple={deleteTriple}\n                                /> \n                                    \n                            )}\n                        </div>\n\n                        <button className=\"btn-primary addPropButton col-xs-3\"\n                        onClick={handleChange}>\n                        + Triple</button>\n                    </div>\n                </div>\n\n            )}/>\n\n           \n         </div>   \n        \n        \n    );\n                                   \n    \n}\n\nexport default ShapeComponent;\n\n","import React,{useContext} from 'react';\nimport '../App.css';\nimport ShapeComponent from './shexComponents/ShapeComponent';\nimport {ShapesContext} from '../App';\n\nfunction AssistantComp (props) {\n\n    const context = useContext(ShapesContext);\n    const {colapse} = props;\n\n    return (<div ref={colapse} id='assistant-container' className=\"assistant col-lg-6\" style={context.currentStyle}> \n                    {context.shapes.map(shape =>{\n                                \n                            return <ShapeComponent key={shape.id} shape={shape}/>\n                    })\n                    }\n\n                    <button id='addShapeButton' \n                            className=\"btn-primary addShapeButton\"\n                            onClick={context.addShape}>\n                            + Shape\n                    </button>\n                </div>);\n\n    \n}\n\nexport default AssistantComp;","import React from 'react';\nimport Codemirror from 'codemirror';\nimport Editor from '../../entities/editor';\n\nfunction PrefixSelector (props){\n\n    const {namespaces} = props;\n\n\n    const handleChange = (e) =>{\n        let yashe = Editor.getInstance().getYashe();\n        let current = yashe.getValue();\n        let defined = yashe.getDefinedPrefixes();\n        let prefix= e.target.value;\n        let uri = 'http://example.org/';\n        //getUri\n        for(let def in namespaces){\n          for(let p in namespaces[def]){\n            if(p==prefix)\n              uri = namespaces[def][p];\n          }\n        }\n        yashe.setValue( 'PREFIX ' + prefix + ': <' + uri + '>\\n' + current );\n        Codemirror.signal(yashe,'prefixUpdate');\n    }\n\n    return (<div>\n             \n                <button className='form-control'\n                        onClick={handleChange}>\n                        Example Prefix\n                </button>\n\n                {\n                    \n                    Object.keys(namespaces).map( (key) =>{\n                            return <div key={key}>\n                                        <select  className='form-control'\n                                                 onChange={handleChange}>\n                                            <option>{key}</option>\n                                            { \n                                                Object.keys(namespaces[key]).map( (prefix) =>{\n                                                    return <option key={prefix} value={prefix}>{prefix}</option>\n                                                })  \n                                            }\n                                        </select>\n                                    </div>\n                                    \n                    }) \n                }\n            </div>);\n                     \n}\n\n\nexport default PrefixSelector;\n","export const ALL_PREFIXES = {\n    Wikidata: {\n        wikibase: 'http://wikiba.se/ontology#',\n        wd: 'http://www.wikidata.org/entity/',\n        wdt: 'http://www.wikidata.org/prop/direct/',\n        wdtn: 'http://www.wikidata.org/prop/direct-normalized/',\n        wds: 'http://www.wikidata.org/entity/statement/',\n        p: 'http://www.wikidata.org/prop/',\n        wdref: 'http://www.wikidata.org/reference/',\n        wdv: 'http://www.wikidata.org/value/',\n        ps: 'http://www.wikidata.org/prop/statement/',\n        psv: 'http://www.wikidata.org/prop/statement/value/',\n        psn: 'http://www.wikidata.org/prop/statement/value-normalized/',\n        pq: 'http://www.wikidata.org/prop/qualifier/',\n        pqv: 'http://www.wikidata.org/prop/qualifier/value/',\n        pqn: 'http://www.wikidata.org/prop/qualifier/value-normalized/',\n        pr: 'http://www.wikidata.org/prop/reference/',\n        prv: 'http://www.wikidata.org/prop/reference/value/',\n        prn: 'http://www.wikidata.org/prop/reference/value-normalized/',\n        wdno: 'http://www.wikidata.org/prop/novalue/',\n        wdata: 'http://www.wikidata.org/wiki/Special:EntityData/'\n    },\n    W3C: {\n        rdfs: 'http://www.w3.org/2000/01/rdf-schema#',\n        rdf: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',\n        owl: 'http://www.w3.org/2002/07/owl#',\n        skos: 'http://www.w3.org/2004/02/skos/core#',\n        xsd: 'http://www.w3.org/2001/XMLSchema#',\n        prov: 'http://www.w3.org/ns/prov#'\n    },\n    'Social/Other': {\n        schema: 'http://schema.org/',\n        geo: 'http://www.opengis.net/ont/geosparql#',\n        geof: 'http://www.opengis.net/def/geosparql/function/'\n    },\n    Blazegraph: {\n        bd: 'http://www.bigdata.com/rdf#',\n        bds: 'http://www.bigdata.com/rdf/search#',\n        gas: 'http://www.bigdata.com/rdf/gas#',\n        hint: 'http://www.bigdata.com/queryHints#'\n    }\n};\n\n\n","import React from 'react';\nimport PrefixSelector from './PrefixSelector';\nimport {ALL_PREFIXES} from '../../utils/rdfUtils';\n\n\nfunction Nav (props) {\n\n    const {toggle} = props;\n\n    return (<div className=\"row editor-nav\">\n                <button className=\"btn btn-default assistantBtn \" \n                        type=\"button\"\n                        onClick={toggle}>\n                        Assistant\n                </button>\n\n                <div className=\"dropdown\">\n                    <button className=\"btn btn-default dropdown-toggle\" type=\"button\" data-toggle=\"dropdown\">Prefixes\n                    <span className=\"caret\"></span></button>\n                    <ul className='dropdown-menu'>\n                        <li>\n                            <div id='prefixesDropdown' className='prefixes'>  \n\n                                <PrefixSelector namespaces={ALL_PREFIXES}/>\n                                  \n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </div>);\n    \n    \n}\n\n\nexport default Nav;\n","import React, {useState} from 'react';\nimport SlideToggle from \"react-slide-toggle\";\nimport logo from './logo.svg';\nimport './App.css';\n\nimport EditorComp from './components/EditorComp';\nimport AssistantComp from './components/AssistantComp';\nimport Nav from './components/navComponents/Nav';\n\nimport shexUtils from './utils/shexUtils';\n\n\nexport const ShapesContext = React.createContext();\n\nfunction App() {\n\n    const [shapes,setShapes] = useState([]);\n    const [prefixes,setPrefixes] = useState([{key:'',val:'http://example.org/'}]);\n\n     const darkStyle = {\n        background: '#2B2B2B',\n        color:'white'\n    }\n\n    const lightStyle = {\n        background: '#eaf3ff',\n        color:'black'\n    }\n\n    const [style,setStyle] = useState(lightStyle);\n    let theme = 'light';\n\n    const addShape = () =>{\n      setShapes([...shapes,shexUtils.addShape(shapes)]);\n    }\n\n    const deleteShape = (shapeId) =>{\n      setShapes(shexUtils.deleteShape(shapes,shapeId,false));\n    }\n\n    const emit = ()=>{\n      shexUtils.emit(shapes);\n    }\n\n    const replaceShapes = (newShapes) =>{\n      //This allows to render all the shapes when a property is updated.\n      //Best Glitch Ever\n      setShapes([]); \n      setShapes(newShapes);\n    }\n\n    const updatePrefixes = (newPrefixes)=>{\n      setPrefixes(newPrefixes);\n    }\n    \n    const changeThemeStyle = () =>{\n      if(theme=='light'){//I don't know why this doesn't work with style state\n        setStyle(darkStyle);\n        theme='dark';\n      }else{\n        theme='light';\n        setStyle(lightStyle);\n      }\n    }\n\n  \n    return (\n            \n            <ShapesContext.Provider value={\n                                    {\n                                      shapes,shapes,\n                                      addShape:addShape,\n                                      deleteShape:deleteShape,\n                                      replaceShapes:replaceShapes,\n                                      prefixes:prefixes,\n                                      updatePrefixes:updatePrefixes,\n                                      emit:emit,\n                                      currentStyle:style,\n                                      changeThemeStyle:changeThemeStyle\n                                    }\n                                  }>\n                \n                <SlideToggle duration={500}\n                             collapsed\n                             render={({ toggle, setCollapsibleElement, progress }) => (\n                              <div> \n                                  <Nav toggle={toggle}/>\n                                  <div className=\"row separator\" style={style}> \n                                      <AssistantComp colapse={setCollapsibleElement} initialShapes={shapes} />\n                                      <EditorComp />\n                                      \n                                  </div>\n                              </div>                              \n                  )}/>\n\n\n            </ShapesContext.Provider>\n          );\n                       \n           \n  \n    \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}